; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\funcode.o --asm_dir=..\ --list_dir=..\ --depend=..\funcode.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\USER -I..\CORE -I..\FWLIB\inc -I..\SYSTEM\INC -IG:\uart-NVIC\USER\RTE -IH:\mdk5.14\ARM\PACK\Keil\STM32F4xx_DFP\1.0.8\Device\Include -IH:\mdk5.14\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DSTM32F40_41xxx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER --omf_browse=..\funcode.crf funcode.c]
                          THUMB

                          AREA ||i.BluetoothMatch||, CODE, READONLY, ALIGN=2

                  BluetoothMatch PROC
;;;357    */
;;;358    void BluetoothMatch(void)
000000  b53e              PUSH     {r1-r5,lr}
;;;359    {
;;;360        //5007 应该是没有是没有消息体的，所以参数msg_len用不上
;;;361        //进入来该函数用于将当前底层的值传给蓝牙
;;;362        u8 i;
;;;363        //声明固定的内容字节
;;;364        u8 info[12] = {0xee, 0xee, 0x00, 0x0C, 0x00, 0x58, 0x07, 0x51, 0x51, 0x44, 0x4d, 0x00};
000002  a20e              ADR      r2,|L1.60|
000004  ca07              LDM      r2,{r0-r2}
000006  e88d0007          STM      sp,{r0-r2}
;;;365        info[4] = receiveDataArray[4];               //来自蓝牙的SN序列号
00000a  480f              LDR      r0,|L1.72|
00000c  7900              LDRB     r0,[r0,#4]  ; receiveDataArray
00000e  f88d0004          STRB     r0,[sp,#4]
;;;366        info[11] = generateCheckCode(info, info[3]); //校验码
000012  f89d1003          LDRB     r1,[sp,#3]
000016  4668              MOV      r0,sp
000018  f7fffffe          BL       generateCheckCode
00001c  f88d000b          STRB     r0,[sp,#0xb]
;;;367        for (i = 0; i < 12; i++)
000020  2400              MOVS     r4,#0
000022  e005              B        |L1.48|
                  |L1.36|
;;;368        {
;;;369    			usart1_putchar(info[i]); 
000024  f81d0004          LDRB     r0,[sp,r4]
000028  f7fffffe          BL       usart1_putchar
00002c  1c60              ADDS     r0,r4,#1              ;367
00002e  b2c4              UXTB     r4,r0                 ;367
                  |L1.48|
000030  2c0c              CMP      r4,#0xc               ;367
000032  dbf7              BLT      |L1.36|
;;;370        }
;;;371    
;;;372        //配对成功发送对应协议包之后初始化上位机
;;;373        initApp();
000034  f7fffffe          BL       initApp
;;;374    }
000038  bd3e              POP      {r1-r5,pc}
;;;375    
                          ENDP

00003a  0000              DCW      0x0000
                  |L1.60|
00003c  eeee00            DCB      238,238,0
00003f  0c00              DCB      "\f",0
000041  58075151          DCB      "X\aQQDM",0
000045  444d00  
                  |L1.72|
                          DCD      receiveDataArray

                          AREA ||i.getStatusInfo||, CODE, READONLY, ALIGN=1

                  getStatusInfo PROC
;;;26     */
;;;27     void getStatusInfo(void)
000000  4770              BX       lr
;;;28     {
;;;29         //负责解析出消息体数据即可
;;;30     }
;;;31     
                          ENDP


                          AREA ||i.initApp||, CODE, READONLY, ALIGN=2

                  initApp PROC
;;;642    */
;;;643    void initApp(void)
000000  b510              PUSH     {r4,lr}
;;;644    {
;;;645    
;;;646        u8 i;
;;;647        // sendStatusInfo(0);          //发送状态设备的查询数据包 -0x1801
;;;648        //发送通道这里自定义一个函数，将通道的所有参数都发送过去，按照1002 的协议恢复包
;;;649    
;;;650        sendTotalVolume(0); //发送DSP的总音量数据包 -0x1803
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       sendTotalVolume
;;;651                            // sendResetBalance(0);      //发送设置重置均衡数据包 -0x1804
;;;652                            // sendEqualizerRec(0);      //发送恢复均衡数据包  -0x1805
;;;653        sendMute(0);        //发送静音控制数据包 -0x1806
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       sendMute
;;;654        //sendPreSoundEffe(0);      //发送设置系统的预置音效数据包 -0x1807
;;;655        //sendEqualizerCtr(0);      //发送参量均衡控制数据包 -0x1809
;;;656        //sendGraphicEqualizer(0);  //发送图示均衡数据包 -0x180A
;;;657        //sendJointCtr(0);          //发送联调控制数据包 -0x180B
;;;658    
;;;659        //发送每一个通道的延时数据
;;;660        for (i = 1; i < 13; i++)
00000e  2401              MOVS     r4,#1
000010  e00c              B        |L3.44|
                  |L3.18|
;;;661            sendDelayCtr(0,allConfig.CH[i].ms,i, 0); //发送延时控制数据包 -0x180C
000012  ebc402c4          RSB      r2,r4,r4,LSL #3
000016  4807              LDR      r0,|L3.52|
000018  eb001042          ADD      r0,r0,r2,LSL #5
00001c  8801              LDRH     r1,[r0,#0]
00001e  2300              MOVS     r3,#0
000020  4622              MOV      r2,r4
000022  4618              MOV      r0,r3
000024  f7fffffe          BL       sendDelayCtr
000028  1c60              ADDS     r0,r4,#1              ;660
00002a  b2c4              UXTB     r4,r0                 ;660
                  |L3.44|
00002c  2c0d              CMP      r4,#0xd               ;660
00002e  dbf0              BLT      |L3.18|
;;;662    }
000030  bd10              POP      {r4,pc}
;;;663    
                          ENDP

000032  0000              DCW      0x0000
                  |L3.52|
                          DCD      allConfig+0x2

                          AREA ||i.reserve1||, CODE, READONLY, ALIGN=1

                  reserve1 PROC
;;;299    */
;;;300    void reserve1(void)
000000  4770              BX       lr
;;;301    {
;;;302    }
;;;303    
                          ENDP


                          AREA ||i.reserve2||, CODE, READONLY, ALIGN=1

                  reserve2 PROC
;;;308    */
;;;309    void reserve2(void)
000000  4770              BX       lr
;;;310    {
;;;311    }
;;;312    
                          ENDP


                          AREA ||i.reserve3||, CODE, READONLY, ALIGN=1

                  reserve3 PROC
;;;317    */
;;;318    void reserve3(void)
000000  4770              BX       lr
;;;319    {
;;;320    }
;;;321    
                          ENDP


                          AREA ||i.sendChannel||, CODE, READONLY, ALIGN=2

                  sendChannel PROC
;;;394    */
;;;395    void sendChannel(u8 flag, u8 sn_code)
000000  b5fe              PUSH     {r1-r7,lr}
;;;396    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;397        //根据 receiveDataArray  重新构建一个数组
;;;398        u8 i, reply[11] = {0xee, 0xee, 0x00, 0x0B, 0x00, 0x18, 0x02, 0x00, 0x00, 0x00, 0x00};
000006  a210              ADR      r2,|L7.72|
000008  ca07              LDM      r2,{r0-r2}
00000a  e88d0007          STM      sp,{r0-r2}
;;;399    		reply[4] = sn_code;
00000e  f88d6004          STRB     r6,[sp,#4]
;;;400        reply[7] = receiveDataArray[7];           //第几通道
000012  4810              LDR      r0,|L7.84|
000014  79c0              LDRB     r0,[r0,#7]  ; receiveDataArray
000016  f88d0007          STRB     r0,[sp,#7]
;;;401        reply[8] = receiveDataArray[8];           //参数类别
00001a  480e              LDR      r0,|L7.84|
00001c  7a00              LDRB     r0,[r0,#8]  ; receiveDataArray
00001e  f88d0008          STRB     r0,[sp,#8]
;;;402    		reply[9] = flag;
000022  f88d5009          STRB     r5,[sp,#9]
;;;403        reply[10] = generateCheckCode(reply, 10); //校验码
000026  210a              MOVS     r1,#0xa
000028  4668              MOV      r0,sp
00002a  f7fffffe          BL       generateCheckCode
00002e  f88d000a          STRB     r0,[sp,#0xa]
;;;404    
;;;405        //发送
;;;406        for (i = 0; i < 11; i++)
000032  2400              MOVS     r4,#0
000034  e005              B        |L7.66|
                  |L7.54|
;;;407        {
;;;408    			usart1_putchar(reply[i]); 
000036  f81d0004          LDRB     r0,[sp,r4]
00003a  f7fffffe          BL       usart1_putchar
00003e  1c60              ADDS     r0,r4,#1              ;406
000040  b2c4              UXTB     r4,r0                 ;406
                  |L7.66|
000042  2c0b              CMP      r4,#0xb               ;406
000044  dbf7              BLT      |L7.54|
;;;409        }
;;;410    }
000046  bdfe              POP      {r1-r7,pc}
;;;411    
                          ENDP

                  |L7.72|
000048  eeee00            DCB      238,238,0
00004b  0b00              DCB      "\v",0
00004d  180200            DCB      24,2,0
000050  00                DCB      0
000051  00                DCB      0
000052  00                DCB      0
000053  00                DCB      0
                  |L7.84|
                          DCD      receiveDataArray

                          AREA ||i.sendDelayCtr||, CODE, READONLY, ALIGN=2

                  sendDelayCtr PROC
;;;581    */
;;;582    void sendDelayCtr(u8 unit,u16 value,u8 ch, u8 sn_code)
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;583    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;584        u8 i, reply[12] = {0xee, 0xee, 0x00, 0x0C, 0x00, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00};
00000c  a210              ADR      r2,|L8.80|
00000e  ca07              LDM      r2,{r0-r2}
000010  e88d0007          STM      sp,{r0-r2}
;;;585    		reply[4] = sn_code;   
000014  f88d8004          STRB     r8,[sp,#4]
;;;586    		reply[7] = ch; 
000018  f88d7007          STRB     r7,[sp,#7]
;;;587    		reply[8] = value & 0xff;   //低位
00001c  b2e0              UXTB     r0,r4
00001e  f88d0008          STRB     r0,[sp,#8]
;;;588        reply[9] = (value>>8) & 0xff; //高位
000022  0a20              LSRS     r0,r4,#8
000024  f88d0009          STRB     r0,[sp,#9]
;;;589    		reply[10] = unit; 
000028  f88d600a          STRB     r6,[sp,#0xa]
;;;590        reply[11] = generateCheckCode(reply, 11); //校验码
00002c  210b              MOVS     r1,#0xb
00002e  4668              MOV      r0,sp
000030  f7fffffe          BL       generateCheckCode
000034  f88d000b          STRB     r0,[sp,#0xb]
;;;591    
;;;592        for (i = 0; i < 12; i++)
000038  2500              MOVS     r5,#0
00003a  e005              B        |L8.72|
                  |L8.60|
;;;593        {
;;;594            usart1_putchar(reply[i]);	
00003c  f81d0005          LDRB     r0,[sp,r5]
000040  f7fffffe          BL       usart1_putchar
000044  1c68              ADDS     r0,r5,#1              ;592
000046  b2c5              UXTB     r5,r0                 ;592
                  |L8.72|
000048  2d0c              CMP      r5,#0xc               ;592
00004a  dbf7              BLT      |L8.60|
;;;595        }
;;;596    }
00004c  e8bd83fe          POP      {r1-r9,pc}
;;;597    
                          ENDP

                  |L8.80|
000050  eeee00            DCB      238,238,0
000053  0c00              DCB      "\f",0
000055  180c00            DCB      24,"\f",0
000058  00                DCB      0
000059  00                DCB      0
00005a  00                DCB      0
00005b  00                DCB      0

                          AREA ||i.sendEqualizerCtr||, CODE, READONLY, ALIGN=2

                  sendEqualizerCtr PROC
;;;522    */
;;;523    void sendEqualizerCtr(u8 type, u8 ch, u8 sn_code)
000000  b5fe              PUSH     {r1-r7,lr}
;;;524    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;525        u8 i, reply[10] = {0xee, 0xee, 0x00, 0x0A, 0x00, 0x18, 0x09, 0x00, 0x00, 0x00};
000008  a20d              ADR      r2,|L9.64|
00000a  ca07              LDM      r2,{r0-r2}
00000c  e88d0007          STM      sp,{r0-r2}
;;;526    		reply[4] = sn_code; 
000010  f88d7004          STRB     r7,[sp,#4]
;;;527    		reply[7] = ch; 
000014  f88d6007          STRB     r6,[sp,#7]
;;;528    		reply[8] = type; 
000018  f88d5008          STRB     r5,[sp,#8]
;;;529        reply[9] = generateCheckCode(reply, 9); //校验码
00001c  2109              MOVS     r1,#9
00001e  4668              MOV      r0,sp
000020  f7fffffe          BL       generateCheckCode
000024  f88d0009          STRB     r0,[sp,#9]
;;;530        for (i = 0; i < 10; i++)
000028  2400              MOVS     r4,#0
00002a  e005              B        |L9.56|
                  |L9.44|
;;;531        {
;;;532            usart1_putchar(reply[i]);	
00002c  f81d0004          LDRB     r0,[sp,r4]
000030  f7fffffe          BL       usart1_putchar
000034  1c60              ADDS     r0,r4,#1              ;530
000036  b2c4              UXTB     r4,r0                 ;530
                  |L9.56|
000038  2c0a              CMP      r4,#0xa               ;530
00003a  dbf7              BLT      |L9.44|
;;;533        }
;;;534    }
00003c  bdfe              POP      {r1-r7,pc}
;;;535    
                          ENDP

00003e  0000              DCW      0x0000
                  |L9.64|
000040  eeee00            DCB      238,238,0
000043  0a00              DCB      "\n",0
000045  180900            DCB      24,"\t",0
000048  00                DCB      0
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||i.sendEqualizerRec||, CODE, READONLY, ALIGN=2

                  sendEqualizerRec PROC
;;;456    */
;;;457    void sendEqualizerRec(u8 type, u8 sn_code)
000000  b5fe              PUSH     {r1-r7,lr}
;;;458    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;459        u8 i, reply[9] = {0xee, 0xee, 0x00, 0x09, 0x00, 0x18, 0x05, 0x00, 0x00};
000006  a20c              ADR      r2,|L10.56|
000008  ca07              LDM      r2,{r0-r2}
00000a  e88d0007          STM      sp,{r0-r2}
;;;460    		reply[4] = sn_code;   
00000e  f88d6004          STRB     r6,[sp,#4]
;;;461    		reply[7] = type; 
000012  f88d5007          STRB     r5,[sp,#7]
;;;462    		reply[8] = generateCheckCode(reply, 8); //校验码
000016  2108              MOVS     r1,#8
000018  4668              MOV      r0,sp
00001a  f7fffffe          BL       generateCheckCode
00001e  f88d0008          STRB     r0,[sp,#8]
;;;463    
;;;464        for (i = 0; i < 9; i++)
000022  2400              MOVS     r4,#0
000024  e005              B        |L10.50|
                  |L10.38|
;;;465        {
;;;466            usart1_putchar(reply[i]);	
000026  f81d0004          LDRB     r0,[sp,r4]
00002a  f7fffffe          BL       usart1_putchar
00002e  1c60              ADDS     r0,r4,#1              ;464
000030  b2c4              UXTB     r4,r0                 ;464
                  |L10.50|
000032  2c09              CMP      r4,#9                 ;464
000034  dbf7              BLT      |L10.38|
;;;467        }
;;;468    }
000036  bdfe              POP      {r1-r7,pc}
;;;469    
                          ENDP

                  |L10.56|
000038  eeee00            DCB      238,238,0
00003b  0900              DCB      "\t",0
00003d  180500            DCB      24,5,0
000040  00                DCB      0
000041  00                DCB      0
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.sendEquipmentInfo||, CODE, READONLY, ALIGN=2

                  sendEquipmentInfo PROC
;;;335    */
;;;336    void sendEquipmentInfo(void)
000000  b530              PUSH     {r4,r5,lr}
;;;337    {
000002  b085              SUB      sp,sp,#0x14
;;;338        u16 i;
;;;339    
;;;340        //信息返回(模拟串口)
;;;341        u8 send_data[] = {0xee, 0xee, 0x00, 0x13, 0x00,
000004  2214              MOVS     r2,#0x14
000006  a108              ADR      r1,|L11.40|
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       __aeabi_memcpy4
;;;342                          0x58, 0x01, 0x12, 0x34, 0x45,
;;;343                          0x01, 0x01, 0x02, 0x00, 0x00,
;;;344                          0x00, 0x00, 0x06};
;;;345        u16 len = (u16)sizeof(send_data);
00000e  2512              MOVS     r5,#0x12
;;;346        for (i = 0; i < len; i++)
000010  2400              MOVS     r4,#0
000012  e005              B        |L11.32|
                  |L11.20|
;;;347        {
;;;348          usart1_putchar(send_data[i]); 
000014  f81d0004          LDRB     r0,[sp,r4]
000018  f7fffffe          BL       usart1_putchar
00001c  1c60              ADDS     r0,r4,#1              ;346
00001e  b284              UXTH     r4,r0                 ;346
                  |L11.32|
000020  42ac              CMP      r4,r5                 ;346
000022  dbf7              BLT      |L11.20|
;;;349        }
;;;350      
;;;351    }
000024  b005              ADD      sp,sp,#0x14
000026  bd30              POP      {r4,r5,pc}
;;;352    
                          ENDP

                  |L11.40|
000028  eeee00            DCB      238,238,0
00002b  1300              DCB      19,0
00002d  58011234          DCB      "X",1,18,"4E",1,1,2,0
000031  45010102
000035  00      
000036  00                DCB      0
000037  00                DCB      0
000038  00                DCB      0
000039  0600              DCB      6,0
00003b  00                DCB      0

                          AREA ||i.sendErrorStatusInfo||, CODE, READONLY, ALIGN=1

                  sendErrorStatusInfo PROC
;;;326    */
;;;327    void sendErrorStatusInfo(void)
000000  4770              BX       lr
;;;328    {
;;;329    }
;;;330    
                          ENDP


                          AREA ||i.sendGraphicEqualizer||, CODE, READONLY, ALIGN=2

                  sendGraphicEqualizer PROC
;;;542    */
;;;543    void sendGraphicEqualizer(u8 type, u8 ch, u8 sn_code)
000000  b5fe              PUSH     {r1-r7,lr}
;;;544    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;545        u8 i, reply[10] = {0xee, 0xee, 0x00, 0x0A, 0x00, 0x18, 0x0A, 0x00, 0x00, 0x00};
000008  a20d              ADR      r2,|L13.64|
00000a  ca07              LDM      r2,{r0-r2}
00000c  e88d0007          STM      sp,{r0-r2}
;;;546    		reply[4] = sn_code; 
000010  f88d7004          STRB     r7,[sp,#4]
;;;547    		reply[7] = ch; 
000014  f88d6007          STRB     r6,[sp,#7]
;;;548    		reply[8] = type; 
000018  f88d5008          STRB     r5,[sp,#8]
;;;549        reply[9] = generateCheckCode(reply, 9); //校验码
00001c  2109              MOVS     r1,#9
00001e  4668              MOV      r0,sp
000020  f7fffffe          BL       generateCheckCode
000024  f88d0009          STRB     r0,[sp,#9]
;;;550        for (i = 0; i < 10; i++)
000028  2400              MOVS     r4,#0
00002a  e005              B        |L13.56|
                  |L13.44|
;;;551        {
;;;552            usart1_putchar(reply[i]);	
00002c  f81d0004          LDRB     r0,[sp,r4]
000030  f7fffffe          BL       usart1_putchar
000034  1c60              ADDS     r0,r4,#1              ;550
000036  b2c4              UXTB     r4,r0                 ;550
                  |L13.56|
000038  2c0a              CMP      r4,#0xa               ;550
00003a  dbf7              BLT      |L13.44|
;;;553        }
;;;554    }
00003c  bdfe              POP      {r1-r7,pc}
;;;555    
                          ENDP

00003e  0000              DCW      0x0000
                  |L13.64|
000040  eeee00            DCB      238,238,0
000043  0a00              DCB      "\n",0
000045  180a00            DCB      24,"\n",0
000048  00                DCB      0
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||i.sendJointCtr||, CODE, READONLY, ALIGN=2

                  sendJointCtr PROC
;;;560    */
;;;561    void sendJointCtr(u8 sn_code)
000000  b53e              PUSH     {r1-r5,lr}
;;;562    {
000002  4605              MOV      r5,r0
;;;563        u8 i, reply[9] = {0xee, 0xee, 0x00, 0x09, 0x00, 0x18, 0x0B, 0x00, 0x00};
000004  a20d              ADR      r2,|L14.60|
000006  ca07              LDM      r2,{r0-r2}
000008  e88d0007          STM      sp,{r0-r2}
;;;564    		reply[4] = sn_code; 
00000c  f88d5004          STRB     r5,[sp,#4]
;;;565        reply[7] = receiveDataArray[7];
000010  480d              LDR      r0,|L14.72|
000012  79c0              LDRB     r0,[r0,#7]  ; receiveDataArray
000014  f88d0007          STRB     r0,[sp,#7]
;;;566        reply[8] = generateCheckCode(reply, 8); //校验码
000018  2108              MOVS     r1,#8
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       generateCheckCode
000020  f88d0008          STRB     r0,[sp,#8]
;;;567    
;;;568        for (i = 0; i < 9; i++)
000024  2400              MOVS     r4,#0
000026  e005              B        |L14.52|
                  |L14.40|
;;;569        {
;;;570             usart1_putchar(reply[i]);	
000028  f81d0004          LDRB     r0,[sp,r4]
00002c  f7fffffe          BL       usart1_putchar
000030  1c60              ADDS     r0,r4,#1              ;568
000032  b2c4              UXTB     r4,r0                 ;568
                  |L14.52|
000034  2c09              CMP      r4,#9                 ;568
000036  dbf7              BLT      |L14.40|
;;;571        }
;;;572    }
000038  bd3e              POP      {r1-r5,pc}
;;;573    
                          ENDP

00003a  0000              DCW      0x0000
                  |L14.60|
00003c  eeee00            DCB      238,238,0
00003f  0900              DCB      "\t",0
000041  180b00            DCB      24,"\v",0
000044  00                DCB      0
000045  00                DCB      0
000046  00                DCB      0
000047  00                DCB      0
                  |L14.72|
                          DCD      receiveDataArray

                          AREA ||i.sendMute||, CODE, READONLY, ALIGN=2

                  sendMute PROC
;;;474    */
;;;475    void sendMute(u8 sn_code)
000000  b53e              PUSH     {r1-r5,lr}
;;;476    {
000002  4605              MOV      r5,r0
;;;477        u8 i, reply[9] = {0xee, 0xee, 0x00, 0x09, 0x00, 0x18, 0x06, 0x00, 0x00};
000004  a20d              ADR      r2,|L15.60|
000006  ca07              LDM      r2,{r0-r2}
000008  e88d0007          STM      sp,{r0-r2}
;;;478    		reply[4] = sn_code; 
00000c  f88d5004          STRB     r5,[sp,#4]
;;;479        reply[7] = allConfig.Mute;
000010  480d              LDR      r0,|L15.72|
000012  7840              LDRB     r0,[r0,#1]  ; allConfig
000014  f88d0007          STRB     r0,[sp,#7]
;;;480        reply[8] = generateCheckCode(reply, 8); //校验码
000018  2108              MOVS     r1,#8
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       generateCheckCode
000020  f88d0008          STRB     r0,[sp,#8]
;;;481    
;;;482        for (i = 0; i < 9; i++)
000024  2400              MOVS     r4,#0
000026  e005              B        |L15.52|
                  |L15.40|
;;;483        {
;;;484            usart1_putchar(reply[i]);	
000028  f81d0004          LDRB     r0,[sp,r4]
00002c  f7fffffe          BL       usart1_putchar
000030  1c60              ADDS     r0,r4,#1              ;482
000032  b2c4              UXTB     r4,r0                 ;482
                  |L15.52|
000034  2c09              CMP      r4,#9                 ;482
000036  dbf7              BLT      |L15.40|
;;;485        }
;;;486    }
000038  bd3e              POP      {r1-r5,pc}
;;;487    
                          ENDP

00003a  0000              DCW      0x0000
                  |L15.60|
00003c  eeee00            DCB      238,238,0
00003f  0900              DCB      "\t",0
000041  180600            DCB      24,6,0
000044  00                DCB      0
000045  00                DCB      0
000046  00                DCB      0
000047  00                DCB      0
                  |L15.72|
                          DCD      allConfig

                          AREA ||i.sendPreSoundEffe||, CODE, READONLY, ALIGN=1

                  sendPreSoundEffe PROC
;;;492    */
;;;493    void sendPreSoundEffe(u8 sn_code)
000000  4770              BX       lr
;;;494    {
;;;495    }
;;;496    
                          ENDP


                          AREA ||i.sendReserve1||, CODE, READONLY, ALIGN=1

                  sendReserve1 PROC
;;;603    */
;;;604    void sendReserve1(u8 sn_code)
000000  4770              BX       lr
;;;605    {
;;;606    #if 0 
;;;607    		u8 ch;   //通道从1开始
;;;608        u8 para = 0; //参数
;;;609        u8 i, reply[11] = {0xEE, 0xEE, 0x00, 0x0B, 0x00, 0x18, 0x02, 0x00, 0x00, 0x01, 0x00};
;;;610    		reply[4] = sn_code;   
;;;611        for (ch = 1; ch < 13; ch++)
;;;612        {
;;;613    				
;;;614        }
;;;615    		
;;;616    #endif
;;;617    }
;;;618    
                          ENDP


                          AREA ||i.sendReserve2||, CODE, READONLY, ALIGN=1

                  sendReserve2 PROC
;;;623    */
;;;624    void sendReserve2(u8 sn_code)
000000  4770              BX       lr
;;;625    {
;;;626    }
;;;627    
                          ENDP


                          AREA ||i.sendReserve3||, CODE, READONLY, ALIGN=1

                  sendReserve3 PROC
;;;632    */
;;;633    void sendReserve3(u8 sn_code)
000000  4770              BX       lr
;;;634    {
;;;635    }
;;;636    
                          ENDP


                          AREA ||i.sendResetBalance||, CODE, READONLY, ALIGN=2

                  sendResetBalance PROC
;;;436    */
;;;437    void sendResetBalance(u8 type, u8 ch, u8 sn_code)
000000  b5fe              PUSH     {r1-r7,lr}
;;;438    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;439        u8 i, reply[10] = {0xee, 0xee, 0x00, 0x0A, 0x00, 0x18, 0x04, 0x00, 0x00, 0x00};
000008  a20d              ADR      r2,|L20.64|
00000a  ca07              LDM      r2,{r0-r2}
00000c  e88d0007          STM      sp,{r0-r2}
;;;440    		reply[4] = sn_code; 
000010  f88d7004          STRB     r7,[sp,#4]
;;;441    		reply[7] = ch;
000014  f88d6007          STRB     r6,[sp,#7]
;;;442    		reply[8] = type; 		
000018  f88d5008          STRB     r5,[sp,#8]
;;;443        reply[9] = generateCheckCode(reply, 9); //校验码
00001c  2109              MOVS     r1,#9
00001e  4668              MOV      r0,sp
000020  f7fffffe          BL       generateCheckCode
000024  f88d0009          STRB     r0,[sp,#9]
;;;444    
;;;445        for (i = 0; i < 10; i++)
000028  2400              MOVS     r4,#0
00002a  e005              B        |L20.56|
                  |L20.44|
;;;446        {
;;;447            usart1_putchar(reply[i]);	
00002c  f81d0004          LDRB     r0,[sp,r4]
000030  f7fffffe          BL       usart1_putchar
000034  1c60              ADDS     r0,r4,#1              ;445
000036  b2c4              UXTB     r4,r0                 ;445
                  |L20.56|
000038  2c0a              CMP      r4,#0xa               ;445
00003a  dbf7              BLT      |L20.44|
;;;448        }
;;;449    }
00003c  bdfe              POP      {r1-r7,pc}
;;;450    
                          ENDP

00003e  0000              DCW      0x0000
                  |L20.64|
000040  eeee00            DCB      238,238,0
000043  0a00              DCB      "\n",0
000045  180400            DCB      24,4,0
000048  00                DCB      0
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||i.sendStatusInfo||, CODE, READONLY, ALIGN=1

                  sendStatusInfo PROC
;;;384    */
;;;385    void sendStatusInfo(u8 sn_code)
000000  4770              BX       lr
;;;386    {
;;;387    }
;;;388    
                          ENDP


                          AREA ||i.sendSystemReset||, CODE, READONLY, ALIGN=2

                  sendSystemReset PROC
;;;502    */
;;;503    void sendSystemReset(u8 reset, u8 sn_code)
000000  b5fe              PUSH     {r1-r7,lr}
;;;504    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;505        u8 i, reply[9] = {0xee, 0xee, 0x00, 0x09, 0x00, 0x18, 0x08, 0x00, 0x00};
000006  a20c              ADR      r2,|L22.56|
000008  ca07              LDM      r2,{r0-r2}
00000a  e88d0007          STM      sp,{r0-r2}
;;;506    		reply[4] = sn_code; 
00000e  f88d6004          STRB     r6,[sp,#4]
;;;507    		reply[7] = reset;
000012  f88d5007          STRB     r5,[sp,#7]
;;;508        reply[8] = generateCheckCode(reply, 8); //校验码
000016  2108              MOVS     r1,#8
000018  4668              MOV      r0,sp
00001a  f7fffffe          BL       generateCheckCode
00001e  f88d0008          STRB     r0,[sp,#8]
;;;509    
;;;510        for (i = 0; i < 9; i++)
000022  2400              MOVS     r4,#0
000024  e005              B        |L22.50|
                  |L22.38|
;;;511        {
;;;512            usart1_putchar(reply[i]);	
000026  f81d0004          LDRB     r0,[sp,r4]
00002a  f7fffffe          BL       usart1_putchar
00002e  1c60              ADDS     r0,r4,#1              ;510
000030  b2c4              UXTB     r4,r0                 ;510
                  |L22.50|
000032  2c09              CMP      r4,#9                 ;510
000034  dbf7              BLT      |L22.38|
;;;513        }
;;;514    }
000036  bdfe              POP      {r1-r7,pc}
;;;515    
                          ENDP

                  |L22.56|
000038  eeee00            DCB      238,238,0
00003b  0900              DCB      "\t",0
00003d  180800            DCB      24,"\b",0
000040  00                DCB      0
000041  00                DCB      0
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.sendTotalVolume||, CODE, READONLY, ALIGN=2

                  sendTotalVolume PROC
;;;416    */
;;;417    void sendTotalVolume(u8 sn_code)
000000  b53e              PUSH     {r1-r5,lr}
;;;418    {
000002  4605              MOV      r5,r0
;;;419        u8 i, reply[9] = {0xee, 0xee, 0x00, 0x09, 0x00, 0x18, 0x03, 0x00, 0x00};
000004  a20d              ADR      r2,|L23.60|
000006  ca07              LDM      r2,{r0-r2}
000008  e88d0007          STM      sp,{r0-r2}
;;;420    		reply[4] = sn_code; 
00000c  f88d5004          STRB     r5,[sp,#4]
;;;421        reply[7] = allConfig.volume;            //设定成功之后的音量
000010  480d              LDR      r0,|L23.72|
000012  7800              LDRB     r0,[r0,#0]  ; allConfig
000014  f88d0007          STRB     r0,[sp,#7]
;;;422        reply[8] = generateCheckCode(reply, 8); //校验码
000018  2108              MOVS     r1,#8
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       generateCheckCode
000020  f88d0008          STRB     r0,[sp,#8]
;;;423    
;;;424        for (i = 0; i < 9; i++)
000024  2400              MOVS     r4,#0
000026  e005              B        |L23.52|
                  |L23.40|
;;;425        {
;;;426    			usart1_putchar(reply[i]);	
000028  f81d0004          LDRB     r0,[sp,r4]
00002c  f7fffffe          BL       usart1_putchar
000030  1c60              ADDS     r0,r4,#1              ;424
000032  b2c4              UXTB     r4,r0                 ;424
                  |L23.52|
000034  2c09              CMP      r4,#9                 ;424
000036  dbf7              BLT      |L23.40|
;;;427        }
;;;428    }
000038  bd3e              POP      {r1-r5,pc}
;;;429    
                          ENDP

00003a  0000              DCW      0x0000
                  |L23.60|
00003c  eeee00            DCB      238,238,0
00003f  0900              DCB      "\t",0
000041  180300            DCB      24,3,0
000044  00                DCB      0
000045  00                DCB      0
000046  00                DCB      0
000047  00                DCB      0
                  |L23.72|
                          DCD      allConfig

                          AREA ||i.setChannel||, CODE, READONLY, ALIGN=2

                  setChannel PROC
;;;36     */
;;;37     void setChannel(void)
000000  b570              PUSH     {r4-r6,lr}
;;;38     {
;;;39         /*
;;;40             0 表示6音数据
;;;41             1 表示EQ 类型的参数
;;;42             2 代表低通滤波器参数
;;;43             3 代表高通滤波器参数
;;;44             4 延时数据
;;;45             5 相位数据
;;;46             6 静音
;;;47             7 全局音量控制
;;;48             8 混音音量
;;;49             9 通道均衡设置
;;;50         */
;;;51         u8 argType = receiveDataArray[8]; //通道参数类别
000002  485b              LDR      r0,|L24.368|
000004  7a05              LDRB     r5,[r0,#8]  ; receiveDataArray
;;;52     
;;;53         u8 ch = receiveDataArray[7]; //获取通道
000006  79c4              LDRB     r4,[r0,#7]  ; receiveDataArray
;;;54         ch--;                        //发送从0x01开始
000008  1e60              SUBS     r0,r4,#1
00000a  b2c4              UXTB     r4,r0
;;;55     
;;;56         /*判断是什么类型的*/
;;;57         if (argType == 0x00)
00000c  b90d              CBNZ     r5,|L24.18|
;;;58         {
;;;59             argType = 0;
00000e  2500              MOVS     r5,#0
000010  e0a7              B        |L24.354|
                  |L24.18|
;;;60         }
;;;61         else if (argType >= 1 && argType <= 31) //EQ类型
000012  2d01              CMP      r5,#1
000014  db24              BLT      |L24.96|
000016  2d1f              CMP      r5,#0x1f
000018  dc22              BGT      |L24.96|
;;;62         {
;;;63             argType = 1;
00001a  2501              MOVS     r5,#1
;;;64     
;;;65             allConfig.CH[ch].eq->agin = receiveDataArray[9];                                      //增益,这是一个小数
00001c  4854              LDR      r0,|L24.368|
00001e  7a41              LDRB     r1,[r0,#9]  ; receiveDataArray
000020  ebc402c4          RSB      r2,r4,r4,LSL #3
000024  4853              LDR      r0,|L24.372|
000026  eb001042          ADD      r0,r0,r2,LSL #5
00002a  f8801026          STRB     r1,[r0,#0x26]
;;;66             allConfig.CH[ch].eq->Center_fre = (receiveDataArray[11] << 8) | receiveDataArray[10]; //中心频率
00002e  4850              LDR      r0,|L24.368|
000030  7a80              LDRB     r0,[r0,#0xa]  ; receiveDataArray
000032  494f              LDR      r1,|L24.368|
000034  7ac9              LDRB     r1,[r1,#0xb]  ; receiveDataArray
000036  ea402101          ORR      r1,r0,r1,LSL #8
00003a  ebc402c4          RSB      r2,r4,r4,LSL #3
00003e  484d              LDR      r0,|L24.372|
000040  eb001042          ADD      r0,r0,r2,LSL #5
000044  8541              STRH     r1,[r0,#0x2a]
;;;67             allConfig.CH[ch].eq->valueQ = (receiveDataArray[13] << 8) | receiveDataArray[12];     //Q值
000046  484a              LDR      r0,|L24.368|
000048  7b00              LDRB     r0,[r0,#0xc]  ; receiveDataArray
00004a  4949              LDR      r1,|L24.368|
00004c  7b49              LDRB     r1,[r1,#0xd]  ; receiveDataArray
00004e  ea402101          ORR      r1,r0,r1,LSL #8
000052  ebc402c4          RSB      r2,r4,r4,LSL #3
000056  4847              LDR      r0,|L24.372|
000058  eb001042          ADD      r0,r0,r2,LSL #5
00005c  8501              STRH     r1,[r0,#0x28]
00005e  e080              B        |L24.354|
                  |L24.96|
;;;68         }
;;;69         else if (argType == 32) //低通滤波器参数
000060  2d20              CMP      r5,#0x20
000062  d11d              BNE      |L24.160|
;;;70         {
;;;71             argType = 2;
000064  2502              MOVS     r5,#2
;;;72             allConfig.CH[ch].passA.low.type = receiveDataArray[9];                                  //滤波器类型
000066  4842              LDR      r0,|L24.368|
000068  7a41              LDRB     r1,[r0,#9]  ; receiveDataArray
00006a  ebc402c4          RSB      r2,r4,r4,LSL #3
00006e  4841              LDR      r0,|L24.372|
000070  eb001042          ADD      r0,r0,r2,LSL #5
000074  7301              STRB     r1,[r0,#0xc]
;;;73             allConfig.CH[ch].passA.low.freque = (receiveDataArray[11] << 8) | receiveDataArray[10]; //转折频率
000076  483e              LDR      r0,|L24.368|
000078  7a80              LDRB     r0,[r0,#0xa]  ; receiveDataArray
00007a  493d              LDR      r1,|L24.368|
00007c  7ac9              LDRB     r1,[r1,#0xb]  ; receiveDataArray
00007e  ea402101          ORR      r1,r0,r1,LSL #8
000082  ebc402c4          RSB      r2,r4,r4,LSL #3
000086  483b              LDR      r0,|L24.372|
000088  eb001042          ADD      r0,r0,r2,LSL #5
00008c  81c1              STRH     r1,[r0,#0xe]
;;;74             allConfig.CH[ch].passA.low.Order = receiveDataArray[12];                                //阶数
00008e  4838              LDR      r0,|L24.368|
000090  7b01              LDRB     r1,[r0,#0xc]  ; receiveDataArray
000092  ebc402c4          RSB      r2,r4,r4,LSL #3
000096  4837              LDR      r0,|L24.372|
000098  eb001042          ADD      r0,r0,r2,LSL #5
00009c  7401              STRB     r1,[r0,#0x10]
00009e  e060              B        |L24.354|
                  |L24.160|
;;;75         }
;;;76         else if (argType == 33) //高通滤波器参数
0000a0  2d21              CMP      r5,#0x21
0000a2  d11d              BNE      |L24.224|
;;;77         {
;;;78             argType = 3;
0000a4  2503              MOVS     r5,#3
;;;79             allConfig.CH[ch].passA.hign.type = receiveDataArray[9];                                  //滤波器类型
0000a6  4832              LDR      r0,|L24.368|
0000a8  7a41              LDRB     r1,[r0,#9]  ; receiveDataArray
0000aa  ebc402c4          RSB      r2,r4,r4,LSL #3
0000ae  4831              LDR      r0,|L24.372|
0000b0  eb001042          ADD      r0,r0,r2,LSL #5
0000b4  7181              STRB     r1,[r0,#6]
;;;80             allConfig.CH[ch].passA.hign.freque = (receiveDataArray[11] << 8) | receiveDataArray[10]; //转折频率
0000b6  482e              LDR      r0,|L24.368|
0000b8  7a80              LDRB     r0,[r0,#0xa]  ; receiveDataArray
0000ba  492d              LDR      r1,|L24.368|
0000bc  7ac9              LDRB     r1,[r1,#0xb]  ; receiveDataArray
0000be  ea402101          ORR      r1,r0,r1,LSL #8
0000c2  ebc402c4          RSB      r2,r4,r4,LSL #3
0000c6  482b              LDR      r0,|L24.372|
0000c8  eb001042          ADD      r0,r0,r2,LSL #5
0000cc  8101              STRH     r1,[r0,#8]
;;;81             allConfig.CH[ch].passA.hign.Order = receiveDataArray[12];                                //阶数
0000ce  4828              LDR      r0,|L24.368|
0000d0  7b01              LDRB     r1,[r0,#0xc]  ; receiveDataArray
0000d2  ebc402c4          RSB      r2,r4,r4,LSL #3
0000d6  4827              LDR      r0,|L24.372|
0000d8  eb001042          ADD      r0,r0,r2,LSL #5
0000dc  7281              STRB     r1,[r0,#0xa]
0000de  e040              B        |L24.354|
                  |L24.224|
;;;82         }
;;;83         else if (argType == 34) //延时数据
0000e0  2d22              CMP      r5,#0x22
0000e2  d101              BNE      |L24.232|
;;;84         {
;;;85             argType = 4;
0000e4  2504              MOVS     r5,#4
0000e6  e03c              B        |L24.354|
                  |L24.232|
;;;86             //没找到相关的信号
;;;87         }
;;;88         else if (argType == 35) //通道相位
0000e8  2d23              CMP      r5,#0x23
0000ea  d111              BNE      |L24.272|
;;;89         {
;;;90             argType = 5;
0000ec  2505              MOVS     r5,#5
;;;91             allConfig.CH[ch].passA.Phase = receiveDataArray[9];
0000ee  4820              LDR      r0,|L24.368|
0000f0  7a41              LDRB     r1,[r0,#9]  ; receiveDataArray
0000f2  ebc402c4          RSB      r2,r4,r4,LSL #3
0000f6  481f              LDR      r0,|L24.372|
0000f8  eb001042          ADD      r0,r0,r2,LSL #5
0000fc  74c1              STRB     r1,[r0,#0x13]
;;;92             allConfig.CH[ch].passA.value = receiveDataArray[10]; //相位数值，这是小数
0000fe  481c              LDR      r0,|L24.368|
000100  7a81              LDRB     r1,[r0,#0xa]  ; receiveDataArray
000102  ebc402c4          RSB      r2,r4,r4,LSL #3
000106  481b              LDR      r0,|L24.372|
000108  eb001042          ADD      r0,r0,r2,LSL #5
00010c  7501              STRB     r1,[r0,#0x14]
00010e  e028              B        |L24.354|
                  |L24.272|
;;;93         }
;;;94         else if (argType == 36) //静音
000110  2d24              CMP      r5,#0x24
000112  d109              BNE      |L24.296|
;;;95         {
;;;96             argType = 6;
000114  2506              MOVS     r5,#6
;;;97             allConfig.CH[ch].passA.passMute = receiveDataArray[9]; //静音与否
000116  4816              LDR      r0,|L24.368|
000118  7a41              LDRB     r1,[r0,#9]  ; receiveDataArray
00011a  ebc402c4          RSB      r2,r4,r4,LSL #3
00011e  4815              LDR      r0,|L24.372|
000120  eb001042          ADD      r0,r0,r2,LSL #5
000124  7481              STRB     r1,[r0,#0x12]
000126  e01c              B        |L24.354|
                  |L24.296|
;;;98         }
;;;99         else if (argType == 37) //全局音量控制
000128  2d25              CMP      r5,#0x25
00012a  d101              BNE      |L24.304|
;;;100        {
;;;101            argType = 6;
00012c  2506              MOVS     r5,#6
00012e  e018              B        |L24.354|
                  |L24.304|
;;;102            //这个定义很模糊，应指混响
;;;103        }
;;;104        else if (argType == 38) //混音音量
000130  2d26              CMP      r5,#0x26
000132  d113              BNE      |L24.348|
;;;105        {
;;;106            u8 i,j = 9;
000134  2109              MOVS     r1,#9
;;;107            argType = 6;
000136  2506              MOVS     r5,#6
;;;108            for (i = 0; i < 16; i++, j++)
000138  2000              MOVS     r0,#0
00013a  e00c              B        |L24.342|
                  |L24.316|
;;;109            {
;;;110                allConfig.CH[ch].mix_all[i] = receiveDataArray[j];
00013c  4a0c              LDR      r2,|L24.368|
00013e  5c53              LDRB     r3,[r2,r1]
000140  ebc406c4          RSB      r6,r4,r4,LSL #3
000144  4a0b              LDR      r2,|L24.372|
000146  eb021246          ADD      r2,r2,r6,LSL #5
00014a  3216              ADDS     r2,r2,#0x16
00014c  5413              STRB     r3,[r2,r0]
00014e  1c42              ADDS     r2,r0,#1              ;108
000150  b2d0              UXTB     r0,r2                 ;108
000152  1c4a              ADDS     r2,r1,#1              ;108
000154  b2d1              UXTB     r1,r2                 ;108
                  |L24.342|
000156  2810              CMP      r0,#0x10              ;108
000158  dbf0              BLT      |L24.316|
;;;111            }
;;;112            //后面讲16字节的混音传过去
;;;113        }
00015a  e002              B        |L24.354|
                  |L24.348|
;;;114        else if (argType == 39) //通道均衡设置
00015c  2d27              CMP      r5,#0x27
00015e  d100              BNE      |L24.354|
;;;115        {
;;;116            argType = 6;
000160  2506              MOVS     r5,#6
                  |L24.354|
;;;117            //模糊定义
;;;118        }
;;;119    
;;;120        //回复协议包,默认成功
;;;121        sendChannel(1, receiveDataArray[4]);
000162  4803              LDR      r0,|L24.368|
000164  7901              LDRB     r1,[r0,#4]  ; receiveDataArray
000166  2001              MOVS     r0,#1
000168  f7fffffe          BL       sendChannel
;;;122    }
00016c  bd70              POP      {r4-r6,pc}
;;;123    
                          ENDP

00016e  0000              DCW      0x0000
                  |L24.368|
                          DCD      receiveDataArray
                  |L24.372|
                          DCD      allConfig+0x2

                          AREA ||i.setDelayCtr||, CODE, READONLY, ALIGN=2

                  setDelayCtr PROC
;;;271    */
;;;272    void setDelayCtr(void)
000000  b570              PUSH     {r4-r6,lr}
;;;273    {
;;;274        u8 ch = receiveDataArray[7]; //通道
000002  482d              LDR      r0,|L25.184|
000004  79c4              LDRB     r4,[r0,#7]  ; receiveDataArray
;;;275        ch--;
000006  1e60              SUBS     r0,r4,#1
000008  b2c4              UXTB     r4,r0
;;;276        /*注意：这里毫秒 厘米 英寸 任何一个数值发生变化其余两个都要发生变化*/
;;;277        if (receiveDataArray[10] == 0) //毫秒
00000a  482b              LDR      r0,|L25.184|
00000c  7a80              LDRB     r0,[r0,#0xa]  ; receiveDataArray
00000e  b9c0              CBNZ     r0,|L25.66|
;;;278        {
;;;279            allConfig.CH[ch].ms = (receiveDataArray[9] << 8) | receiveDataArray[8];
000010  4829              LDR      r0,|L25.184|
000012  7a00              LDRB     r0,[r0,#8]  ; receiveDataArray
000014  4928              LDR      r1,|L25.184|
000016  7a49              LDRB     r1,[r1,#9]  ; receiveDataArray
000018  ea402101          ORR      r1,r0,r1,LSL #8
00001c  ebc402c4          RSB      r2,r4,r4,LSL #3
000020  4826              LDR      r0,|L25.188|
000022  eb001042          ADD      r0,r0,r2,LSL #5
000026  8001              STRH     r1,[r0,#0]
;;;280            sendDelayCtr(0x00,allConfig.CH[ch].ms,receiveDataArray[7], receiveDataArray[4]);
000028  4823              LDR      r0,|L25.184|
00002a  7903              LDRB     r3,[r0,#4]  ; receiveDataArray
00002c  79c2              LDRB     r2,[r0,#7]  ; receiveDataArray
00002e  ebc405c4          RSB      r5,r4,r4,LSL #3
000032  4822              LDR      r0,|L25.188|
000034  eb001045          ADD      r0,r0,r5,LSL #5
000038  8801              LDRH     r1,[r0,#0]
00003a  2000              MOVS     r0,#0
00003c  f7fffffe          BL       sendDelayCtr
000040  e038              B        |L25.180|
                  |L25.66|
;;;281        }
;;;282        else if (receiveDataArray[10] == 1) //厘米
000042  481d              LDR      r0,|L25.184|
000044  7a80              LDRB     r0,[r0,#0xa]  ; receiveDataArray
000046  2801              CMP      r0,#1
000048  d118              BNE      |L25.124|
;;;283        {
;;;284            allConfig.CH[ch].cm = (receiveDataArray[9] << 8) | receiveDataArray[8];
00004a  481b              LDR      r0,|L25.184|
00004c  7a00              LDRB     r0,[r0,#8]  ; receiveDataArray
00004e  491a              LDR      r1,|L25.184|
000050  7a49              LDRB     r1,[r1,#9]  ; receiveDataArray
000052  ea402101          ORR      r1,r0,r1,LSL #8
000056  ebc402c4          RSB      r2,r4,r4,LSL #3
00005a  4818              LDR      r0,|L25.188|
00005c  eb001042          ADD      r0,r0,r2,LSL #5
000060  8041              STRH     r1,[r0,#2]
;;;285            sendDelayCtr(0x01,allConfig.CH[ch].cm,receiveDataArray[7], receiveDataArray[4]);
000062  4815              LDR      r0,|L25.184|
000064  7903              LDRB     r3,[r0,#4]  ; receiveDataArray
000066  79c2              LDRB     r2,[r0,#7]  ; receiveDataArray
000068  ebc405c4          RSB      r5,r4,r4,LSL #3
00006c  4813              LDR      r0,|L25.188|
00006e  eb001045          ADD      r0,r0,r5,LSL #5
000072  8841              LDRH     r1,[r0,#2]
000074  2001              MOVS     r0,#1
000076  f7fffffe          BL       sendDelayCtr
00007a  e01b              B        |L25.180|
                  |L25.124|
;;;286        }
;;;287        else if (receiveDataArray[10] == 2) //英寸
00007c  480e              LDR      r0,|L25.184|
00007e  7a80              LDRB     r0,[r0,#0xa]  ; receiveDataArray
000080  2802              CMP      r0,#2
000082  d117              BNE      |L25.180|
;;;288        {
;;;289            allConfig.CH[ch].inch = (receiveDataArray[9] << 8) | receiveDataArray[8];
000084  480c              LDR      r0,|L25.184|
000086  7a00              LDRB     r0,[r0,#8]  ; receiveDataArray
000088  490b              LDR      r1,|L25.184|
00008a  7a49              LDRB     r1,[r1,#9]  ; receiveDataArray
00008c  ea402101          ORR      r1,r0,r1,LSL #8
000090  ebc402c4          RSB      r2,r4,r4,LSL #3
000094  4809              LDR      r0,|L25.188|
000096  eb001042          ADD      r0,r0,r2,LSL #5
00009a  8081              STRH     r1,[r0,#4]
;;;290            sendDelayCtr(0x02,allConfig.CH[ch].inch,receiveDataArray[7], receiveDataArray[4]);
00009c  4806              LDR      r0,|L25.184|
00009e  7903              LDRB     r3,[r0,#4]  ; receiveDataArray
0000a0  79c2              LDRB     r2,[r0,#7]  ; receiveDataArray
0000a2  ebc405c4          RSB      r5,r4,r4,LSL #3
0000a6  4805              LDR      r0,|L25.188|
0000a8  eb001045          ADD      r0,r0,r5,LSL #5
0000ac  8881              LDRH     r1,[r0,#4]
0000ae  2002              MOVS     r0,#2
0000b0  f7fffffe          BL       sendDelayCtr
                  |L25.180|
;;;291        }
;;;292      
;;;293    }
0000b4  bd70              POP      {r4-r6,pc}
;;;294    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L25.184|
                          DCD      receiveDataArray
                  |L25.188|
                          DCD      allConfig+0x2

                          AREA ||i.setEqualizerCtr||, CODE, READONLY, ALIGN=2

                  setEqualizerCtr PROC
;;;233    */
;;;234    void setEqualizerCtr(void)
000000  b510              PUSH     {r4,lr}
;;;235    {
;;;236    
;;;237        sendEqualizerCtr(receiveDataArray[8], receiveDataArray[7], receiveDataArray[4]);
000002  4b03              LDR      r3,|L26.16|
000004  791a              LDRB     r2,[r3,#4]  ; receiveDataArray
000006  79d9              LDRB     r1,[r3,#7]  ; receiveDataArray
000008  7a18              LDRB     r0,[r3,#8]  ; receiveDataArray
00000a  f7fffffe          BL       sendEqualizerCtr
;;;238    }
00000e  bd10              POP      {r4,pc}
;;;239    
                          ENDP

                  |L26.16|
                          DCD      receiveDataArray

                          AREA ||i.setEqualizerRec||, CODE, READONLY, ALIGN=2

                  setEqualizerRec PROC
;;;173    */
;;;174    void setEqualizerRec(void)
000000  b510              PUSH     {r4,lr}
;;;175    {
;;;176    
;;;177        if (receiveDataArray[7] == 0x01) //如果要恢复上一次，直接调用allconfig
000002  4805              LDR      r0,|L27.24|
000004  79c0              LDRB     r0,[r0,#7]  ; receiveDataArray
000006  2801              CMP      r0,#1
000008  d000              BEQ      |L27.12|
;;;178        {
;;;179            //调用allconfig,将allconfig 作为最后一次修改的数据
;;;180        }
;;;181        else if (receiveDataArray[7] == 0x02) //恢复所有均衡器到预置参数就不要修改allconfig
00000a  bf00              NOP      
                  |L27.12|
;;;182        {
;;;183            //调用函数时，传入默认固定数据即可。
;;;184        }
;;;185        //回复包
;;;186        sendEqualizerRec(receiveDataArray[7], receiveDataArray[4]);
00000c  4a02              LDR      r2,|L27.24|
00000e  7911              LDRB     r1,[r2,#4]  ; receiveDataArray
000010  79d0              LDRB     r0,[r2,#7]  ; receiveDataArray
000012  f7fffffe          BL       sendEqualizerRec
;;;187    }
000016  bd10              POP      {r4,pc}
;;;188    
                          ENDP

                  |L27.24|
                          DCD      receiveDataArray

                          AREA ||i.setGraphicEqualizer||, CODE, READONLY, ALIGN=2

                  setGraphicEqualizer PROC
;;;244    */
;;;245    void setGraphicEqualizer(void)
000000  b510              PUSH     {r4,lr}
;;;246    {
;;;247    
;;;248        sendGraphicEqualizer(receiveDataArray[8], receiveDataArray[7], receiveDataArray[4]);
000002  4b03              LDR      r3,|L28.16|
000004  791a              LDRB     r2,[r3,#4]  ; receiveDataArray
000006  79d9              LDRB     r1,[r3,#7]  ; receiveDataArray
000008  7a18              LDRB     r0,[r3,#8]  ; receiveDataArray
00000a  f7fffffe          BL       sendGraphicEqualizer
;;;249    }
00000e  bd10              POP      {r4,pc}
;;;250    
                          ENDP

                  |L28.16|
                          DCD      receiveDataArray

                          AREA ||i.setJointCtr||, CODE, READONLY, ALIGN=2

                  setJointCtr PROC
;;;255    */
;;;256    void setJointCtr(void)
000000  b510              PUSH     {r4,lr}
;;;257    {
;;;258        //判断联调是否关闭
;;;259        if (receiveDataArray[7])
;;;260        {
;;;261            //关闭
;;;262        }
;;;263    
;;;264        sendJointCtr(receiveDataArray[4]);
000002  4902              LDR      r1,|L29.12|
000004  7908              LDRB     r0,[r1,#4]  ; receiveDataArray
000006  f7fffffe          BL       sendJointCtr
;;;265    }
00000a  bd10              POP      {r4,pc}
;;;266    
                          ENDP

                  |L29.12|
                          DCD      receiveDataArray

                          AREA ||i.setMute||, CODE, READONLY, ALIGN=2

                  setMute PROC
;;;193    */
;;;194    void setMute(void)
000000  b510              PUSH     {r4,lr}
;;;195    {
;;;196        allConfig.Mute = receiveDataArray[7];
000002  4804              LDR      r0,|L30.20|
000004  79c0              LDRB     r0,[r0,#7]  ; receiveDataArray
000006  4904              LDR      r1,|L30.24|
000008  7048              STRB     r0,[r1,#1]
;;;197        sendMute(receiveDataArray[4]);
00000a  4902              LDR      r1,|L30.20|
00000c  7908              LDRB     r0,[r1,#4]  ; receiveDataArray
00000e  f7fffffe          BL       sendMute
;;;198    }
000012  bd10              POP      {r4,pc}
;;;199    
                          ENDP

                  |L30.20|
                          DCD      receiveDataArray
                  |L30.24|
                          DCD      allConfig

                          AREA ||i.setPreSoundEffe||, CODE, READONLY, ALIGN=1

                  setPreSoundEffe PROC
;;;204    */
;;;205    void setPreSoundEffe(void)
000000  4770              BX       lr
;;;206    {
;;;207    }
;;;208    
                          ENDP


                          AREA ||i.setResetBalance||, CODE, READONLY, ALIGN=2

                  setResetBalance PROC
;;;143    */
;;;144    void setResetBalance(void)
000000  b570              PUSH     {r4-r6,lr}
;;;145    {
;;;146        //eq_stru default_eq = {0x00, 0x02, 0x32}; //默认值
;;;147    
;;;148        //只重置当前的均衡器
;;;149        u8 j, ch = receiveDataArray[7]; //通道
000002  4821              LDR      r0,|L32.136|
000004  79c5              LDRB     r5,[r0,#7]  ; receiveDataArray
;;;150        ch--;
000006  1e68              SUBS     r0,r5,#1
000008  b2c5              UXTB     r5,r0
;;;151        if (receiveDataArray[8] == 0x01) //重置均衡到出厂的设定值
00000a  481f              LDR      r0,|L32.136|
00000c  7a00              LDRB     r0,[r0,#8]  ; receiveDataArray
00000e  2801              CMP      r0,#1
000010  d12f              BNE      |L32.114|
;;;152        {
;;;153            for (j = 0; j < 31; j++)
000012  2400              MOVS     r4,#0
000014  e024              B        |L32.96|
                  |L32.22|
;;;154            {
;;;155                allConfig.CH[ch].eq[j].agin = 0x00;       //增益 默认0.0
000016  2100              MOVS     r1,#0
000018  ebc502c5          RSB      r2,r5,r5,LSL #3
00001c  481b              LDR      r0,|L32.140|
00001e  eb001042          ADD      r0,r0,r2,LSL #5
000022  3026              ADDS     r0,r0,#0x26
000024  eb040244          ADD      r2,r4,r4,LSL #1
000028  f8001012          STRB     r1,[r0,r2,LSL #1]
;;;156                allConfig.CH[ch].eq[j].valueQ = 0x02;     //Q值：默认2.525 ，我向下取整，后期再进行小数化
00002c  2102              MOVS     r1,#2
00002e  ebc502c5          RSB      r2,r5,r5,LSL #3
000032  4816              LDR      r0,|L32.140|
000034  eb001042          ADD      r0,r0,r2,LSL #5
000038  3026              ADDS     r0,r0,#0x26
00003a  eb040244          ADD      r2,r4,r4,LSL #1
00003e  eb000042          ADD      r0,r0,r2,LSL #1
000042  8041              STRH     r1,[r0,#2]
;;;157                allConfig.CH[ch].eq[j].Center_fre = 0x32; //频率是由机器随机生成，所以我这里字节默认50Khz
000044  2132              MOVS     r1,#0x32
000046  ebc502c5          RSB      r2,r5,r5,LSL #3
00004a  4810              LDR      r0,|L32.140|
00004c  eb001042          ADD      r0,r0,r2,LSL #5
000050  3026              ADDS     r0,r0,#0x26
000052  eb040244          ADD      r2,r4,r4,LSL #1
000056  eb000042          ADD      r0,r0,r2,LSL #1
00005a  8081              STRH     r1,[r0,#4]
00005c  1c60              ADDS     r0,r4,#1              ;153
00005e  b2c4              UXTB     r4,r0                 ;153
                  |L32.96|
000060  2c1f              CMP      r4,#0x1f              ;153
000062  dbd8              BLT      |L32.22|
;;;158            }
;;;159    
;;;160            sendResetBalance(0x01, receiveDataArray[7], receiveDataArray[4]);
000064  4808              LDR      r0,|L32.136|
000066  7902              LDRB     r2,[r0,#4]  ; receiveDataArray
000068  79c1              LDRB     r1,[r0,#7]  ; receiveDataArray
00006a  2001              MOVS     r0,#1
00006c  f7fffffe          BL       sendResetBalance
000070  e009              B        |L32.134|
                  |L32.114|
;;;161        }
;;;162        else if (receiveDataArray[8] == 0x02) //恢复均衡器到 预置音效的对应值
000072  4805              LDR      r0,|L32.136|
000074  7a00              LDRB     r0,[r0,#8]  ; receiveDataArray
000076  2802              CMP      r0,#2
000078  d105              BNE      |L32.134|
;;;163        {
;;;164            //暂无预置音效数据
;;;165            sendResetBalance(0x02,  receiveDataArray[7], receiveDataArray[4]);
00007a  4803              LDR      r0,|L32.136|
00007c  7902              LDRB     r2,[r0,#4]  ; receiveDataArray
00007e  79c1              LDRB     r1,[r0,#7]  ; receiveDataArray
000080  2002              MOVS     r0,#2
000082  f7fffffe          BL       sendResetBalance
                  |L32.134|
;;;166        }
;;;167    }
000086  bd70              POP      {r4-r6,pc}
;;;168    
                          ENDP

                  |L32.136|
                          DCD      receiveDataArray
                  |L32.140|
                          DCD      allConfig+0x2

                          AREA ||i.setTotalVolume||, CODE, READONLY, ALIGN=2

                  setTotalVolume PROC
;;;128    */
;;;129    void setTotalVolume(void)
000000  b510              PUSH     {r4,lr}
;;;130    {
;;;131        //解析数据
;;;132        allConfig.volume = receiveDataArray[7]; //音量0-255
000002  4807              LDR      r0,|L33.32|
000004  79c0              LDRB     r0,[r0,#7]  ; receiveDataArray
000006  4907              LDR      r1,|L33.36|
000008  7008              STRB     r0,[r1,#0]
;;;133        if(allConfig.volume == 0x00)
00000a  4608              MOV      r0,r1
00000c  7800              LDRB     r0,[r0,#0]  ; allConfig
00000e  b908              CBNZ     r0,|L33.20|
;;;134            allConfig.Mute = 0x02;  //当声音为0时，则静音
000010  2002              MOVS     r0,#2
000012  7048              STRB     r0,[r1,#1]
                  |L33.20|
;;;135        sendTotalVolume(receiveDataArray[4]);
000014  4902              LDR      r1,|L33.32|
000016  7908              LDRB     r0,[r1,#4]  ; receiveDataArray
000018  f7fffffe          BL       sendTotalVolume
;;;136    }
00001c  bd10              POP      {r4,pc}
;;;137    
                          ENDP

00001e  0000              DCW      0x0000
                  |L33.32|
                          DCD      receiveDataArray
                  |L33.36|
                          DCD      allConfig

                          AREA ||i.systemReset||, CODE, READONLY, ALIGN=2

                  systemReset PROC
;;;213    */
;;;214    void systemReset(void)
000000  b510              PUSH     {r4,lr}
;;;215    {
;;;216        //判断是否复位
;;;217        if (receiveDataArray[7] == 0x01)
000002  480a              LDR      r0,|L34.44|
000004  79c0              LDRB     r0,[r0,#7]  ; receiveDataArray
000006  2801              CMP      r0,#1
000008  d105              BNE      |L34.22|
;;;218        {
;;;219            /*系统复位*/
;;;220            //这里可以加一个判断，判断复位是否成功
;;;221            sendSystemReset(0x01, receiveDataArray[4]);
00000a  4808              LDR      r0,|L34.44|
00000c  7901              LDRB     r1,[r0,#4]  ; receiveDataArray
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       sendSystemReset
000014  e008              B        |L34.40|
                  |L34.22|
;;;222        }
;;;223        else if (receiveDataArray[7] == 0x02)
000016  4805              LDR      r0,|L34.44|
000018  79c0              LDRB     r0,[r0,#7]  ; receiveDataArray
00001a  2802              CMP      r0,#2
00001c  d104              BNE      |L34.40|
;;;224        {
;;;225            sendSystemReset(0x02, receiveDataArray[4]);
00001e  4803              LDR      r0,|L34.44|
000020  7901              LDRB     r1,[r0,#4]  ; receiveDataArray
000022  2002              MOVS     r0,#2
000024  f7fffffe          BL       sendSystemReset
                  |L34.40|
;;;226        }
;;;227    }
000028  bd10              POP      {r4,pc}
;;;228    
                          ENDP

00002a  0000              DCW      0x0000
                  |L34.44|
                          DCD      receiveDataArray

;*** Start embedded assembler ***

#line 1 "funcode.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_funcode_c_d6961c7a____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___9_funcode_c_d6961c7a____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_funcode_c_d6961c7a____REVSH|
#line 153
|__asm___9_funcode_c_d6961c7a____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_funcode_c_d6961c7a____RRX|
#line 328
|__asm___9_funcode_c_d6961c7a____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
