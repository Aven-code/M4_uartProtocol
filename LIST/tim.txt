; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\..\obj\tim.o --asm_dir=..\..\LIST\ --list_dir=..\..\LIST\ --depend=..\..\obj\tim.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\USER -I..\..\CORE -I..\..\FWLIB\inc -I..\..\SYSTEM\INC -IF:\粤嵌\课堂演示-粤嵌1914\3_Cortex-M4应用开发\14_定时器\USER\RTE -IE:\Kile\ARM\PACK\Keil\STM32F4xx_DFP\1.0.8\Device\Include -IE:\Kile\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DSTM32F40_41xxx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\obj\tim.crf ..\..\SYSTEM\SRC\tim.c]
                          THUMB

                          AREA ||i.TIM2_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM2_IRQHandler PROC
;;;49      **/
;;;50     void TIM2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;51     {
;;;52     	if (SET == TIM_GetITStatus(TIM2, TIM_IT_Update))
000002  2101              MOVS     r1,#1
000004  0788              LSLS     r0,r1,#30
000006  f7fffffe          BL       TIM_GetITStatus
00000a  2801              CMP      r0,#1
00000c  d105              BNE      |L1.26|
;;;53     	{
;;;54     		flag = 1;
00000e  4903              LDR      r1,|L1.28|
000010  6008              STR      r0,[r1,#0]  ; flag
;;;55     		// 清除中断标志
;;;56     		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
000012  2101              MOVS     r1,#1
000014  0780              LSLS     r0,r0,#30
000016  f7fffffe          BL       TIM_ClearITPendingBit
                  |L1.26|
;;;57     	}
;;;58     }
00001a  bd10              POP      {r4,pc}
;;;59     
                          ENDP

                  |L1.28|
                          DCD      flag

                          AREA ||i.TIM8_TRG_COM_TIM14_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM8_TRG_COM_TIM14_IRQHandler PROC
;;;164     **/
;;;165    void TIM8_TRG_COM_TIM14_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;166    {
;;;167    	// ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT);
;;;168    	// void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT);
;;;169    	// 是 TIM14 的更新中断
;;;170    	if (TIM_GetITStatus(TIM14, TIM_IT_Update) == SET)
000002  2101              MOVS     r1,#1
000004  4807              LDR      r0,|L2.36|
000006  f7fffffe          BL       TIM_GetITStatus
00000a  2801              CMP      r0,#1
00000c  d108              BNE      |L2.32|
;;;171    	{
;;;172    		led0_pwm_cnt++;
00000e  4806              LDR      r0,|L2.40|
000010  6800              LDR      r0,[r0,#0]  ; led0_pwm_cnt
000012  1c40              ADDS     r0,r0,#1
000014  4904              LDR      r1,|L2.40|
000016  6008              STR      r0,[r1,#0]  ; led0_pwm_cnt
;;;173    		// 清除中断标志
;;;174    		TIM_ClearITPendingBit(TIM14, TIM_IT_Update);
000018  2101              MOVS     r1,#1
00001a  4802              LDR      r0,|L2.36|
00001c  f7fffffe          BL       TIM_ClearITPendingBit
                  |L2.32|
;;;175    	}
;;;176    }
000020  bd10              POP      {r4,pc}
;;;177    
                          ENDP

000022  0000              DCW      0x0000
                  |L2.36|
                          DCD      0x40002000
                  |L2.40|
                          DCD      led0_pwm_cnt

                          AREA ||i.tim14_ch1_led0_get_pwm_cnt||, CODE, READONLY, ALIGN=2

                  tim14_ch1_led0_get_pwm_cnt PROC
;;;192     **/ 
;;;193    uint32_t tim14_ch1_led0_get_pwm_cnt(void)
000000  4801              LDR      r0,|L3.8|
;;;194    {
;;;195    	return led0_pwm_cnt;
000002  6800              LDR      r0,[r0,#0]  ; led0_pwm_cnt
;;;196    }
000004  4770              BX       lr
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      led0_pwm_cnt

                          AREA ||i.tim14_ch1_led0_init||, CODE, READONLY, ALIGN=2

                  tim14_ch1_led0_init PROC
;;;90      **/
;;;91     void tim14_ch1_led0_init(uint16_t period, uint16_t prescaler, uint16_t compare)
000000  b570              PUSH     {r4-r6,lr}
;;;92     {
000002  b08c              SUB      sp,sp,#0x30
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;93     	GPIO_InitTypeDef GPIO_InitStruct;
;;;94     	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
;;;95     	NVIC_InitTypeDef NVIC_InitStruct;
;;;96     	TIM_OCInitTypeDef TIM_OCInitStruct;
;;;97     	
;;;98     	// 使能 TIM14 时钟
;;;99     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM14, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  0208              LSLS     r0,r1,#8
00000e  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;100    	
;;;101    	// 使能 GPIOF 时钟
;;;102    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
000012  2101              MOVS     r1,#1
000014  2020              MOVS     r0,#0x20
000016  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;103    	
;;;104    	// 配置 PF9 复用为 TIM14_CH1
;;;105    	GPIO_PinAFConfig(GPIOF, GPIO_PinSource9, GPIO_AF_TIM14);
00001a  2209              MOVS     r2,#9
00001c  4611              MOV      r1,r2
00001e  482a              LDR      r0,|L4.200|
000020  f7fffffe          BL       GPIO_PinAFConfig
;;;106    	
;;;107    	// 配置 PF9 
;;;108    	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
000024  2002              MOVS     r0,#2
000026  f88d002c          STRB     r0,[sp,#0x2c]
;;;109    	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
00002a  2000              MOVS     r0,#0
00002c  f88d002e          STRB     r0,[sp,#0x2e]
;;;110    	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_9;
000030  f44f7000          MOV      r0,#0x200
000034  900a              STR      r0,[sp,#0x28]
;;;111    	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
000036  2001              MOVS     r0,#1
000038  f88d002f          STRB     r0,[sp,#0x2f]
;;;112    	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
00003c  2003              MOVS     r0,#3
00003e  f88d002d          STRB     r0,[sp,#0x2d]
;;;113    	GPIO_Init(GPIOF, &GPIO_InitStruct);
000042  a90a              ADD      r1,sp,#0x28
000044  4820              LDR      r0,|L4.200|
000046  f7fffffe          BL       GPIO_Init
;;;114    	
;;;115    	// 初始化时基单元
;;;116    	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
00004a  2000              MOVS     r0,#0
00004c  f8ad0024          STRH     r0,[sp,#0x24]
;;;117    	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;  // 向上计数
000050  f8ad001e          STRH     r0,[sp,#0x1e]
;;;118    	TIM_TimeBaseInitStruct.TIM_Period = period;
000054  9608              STR      r6,[sp,#0x20]
;;;119    	TIM_TimeBaseInitStruct.TIM_Prescaler = prescaler;
000056  f8ad401c          STRH     r4,[sp,#0x1c]
;;;120    	// TIM_TimeBaseInitStruct.TIM_RepetitionCounter = ;  // TIM1, TIM8 才使用
;;;121    	TIM_TimeBaseInit(TIM14, &TIM_TimeBaseInitStruct);
00005a  a907              ADD      r1,sp,#0x1c
00005c  481b              LDR      r0,|L4.204|
00005e  f7fffffe          BL       TIM_TimeBaseInit
;;;122    	
;;;123    	// 配置输出比较
;;;124    	// 以下四个是TIM1 和 TIM8 专用配置
;;;125    	//TIM_OCInitStruct.TIM_OCIdleState = ;
;;;126    	//TIM_OCInitStruct.TIM_OCNIdleState = ;
;;;127    	//TIM_OCInitStruct.TIM_OCNPolarity = ;
;;;128    	//TIM_OCInitStruct.TIM_OutputNState = ;
;;;129    	TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;              // CNT < CCR 时 OC1REF 为有效状态
000062  2060              MOVS     r0,#0x60
000064  f8ad0004          STRH     r0,[sp,#4]
;;;130    	TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_Low;       // CC1P 1:低电平有效
000068  2002              MOVS     r0,#2
00006a  f8ad0010          STRH     r0,[sp,#0x10]
;;;131    	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;  // CC1E 1:开启通道
00006e  2001              MOVS     r0,#1
000070  f8ad0006          STRH     r0,[sp,#6]
;;;132    	TIM_OCInitStruct.TIM_Pulse = compare;                       // CCR1 比较值
000074  9503              STR      r5,[sp,#0xc]
;;;133    	TIM_OC1Init(TIM14, &TIM_OCInitStruct);
000076  a901              ADD      r1,sp,#4
000078  4814              LDR      r0,|L4.204|
00007a  f7fffffe          BL       TIM_OC1Init
;;;134    	
;;;135    	// 使能定时器
;;;136    	TIM_Cmd(TIM14, ENABLE);
00007e  2101              MOVS     r1,#1
000080  4812              LDR      r0,|L4.204|
000082  f7fffffe          BL       TIM_Cmd
;;;137    	
;;;138    	// 使能 TIM14 预装载寄存器
;;;139    	TIM_OC1PreloadConfig(TIM14, TIM_OCPreload_Enable);
000086  2108              MOVS     r1,#8
000088  4810              LDR      r0,|L4.204|
00008a  f7fffffe          BL       TIM_OC1PreloadConfig
;;;140    	
;;;141    	// 使能自动重载预装载寄存器
;;;142    	TIM_ARRPreloadConfig(TIM14, ENABLE);
00008e  2101              MOVS     r1,#1
000090  480e              LDR      r0,|L4.204|
000092  f7fffffe          BL       TIM_ARRPreloadConfig
;;;143    	
;;;144    	// 配置 NVIC
;;;145    	NVIC_InitStruct.NVIC_IRQChannel = TIM8_TRG_COM_TIM14_IRQn;
000096  202d              MOVS     r0,#0x2d
000098  f88d0018          STRB     r0,[sp,#0x18]
;;;146    	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
00009c  2001              MOVS     r0,#1
00009e  f88d001b          STRB     r0,[sp,#0x1b]
;;;147    	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 2;
0000a2  2002              MOVS     r0,#2
0000a4  f88d0019          STRB     r0,[sp,#0x19]
;;;148    	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 2;
0000a8  f88d001a          STRB     r0,[sp,#0x1a]
;;;149    	NVIC_Init(&NVIC_InitStruct);
0000ac  a806              ADD      r0,sp,#0x18
0000ae  f7fffffe          BL       NVIC_Init
;;;150    	
;;;151    	// 清除中断标志
;;;152    	TIM_ClearITPendingBit(TIM14, TIM_IT_Update);
0000b2  2101              MOVS     r1,#1
0000b4  4805              LDR      r0,|L4.204|
0000b6  f7fffffe          BL       TIM_ClearITPendingBit
;;;153    	
;;;154    	// 使能中断
;;;155    	TIM_ITConfig(TIM14, TIM_IT_Update, ENABLE);
0000ba  2201              MOVS     r2,#1
0000bc  4611              MOV      r1,r2
0000be  4803              LDR      r0,|L4.204|
0000c0  f7fffffe          BL       TIM_ITConfig
;;;156    }
0000c4  b00c              ADD      sp,sp,#0x30
0000c6  bd70              POP      {r4-r6,pc}
;;;157    
                          ENDP

                  |L4.200|
                          DCD      0x40021400
                  |L4.204|
                          DCD      0x40002000

                          AREA ||i.tim14_ch1_led0_set_pwm_cnt||, CODE, READONLY, ALIGN=2

                  tim14_ch1_led0_set_pwm_cnt PROC
;;;182     **/ 
;;;183    void tim14_ch1_led0_set_pwm_cnt(uint32_t cnt)
000000  4901              LDR      r1,|L5.8|
;;;184    {
;;;185    	led0_pwm_cnt = cnt;
000002  6008              STR      r0,[r1,#0]  ; led0_pwm_cnt
;;;186    }
000004  4770              BX       lr
;;;187    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      led0_pwm_cnt

                          AREA ||i.tim2_init||, CODE, READONLY, ALIGN=1

                  tim2_init PROC
;;;9       **/ 
;;;10     void tim2_init(uint16_t period, uint16_t prescaler)
000000  b57f              PUSH     {r0-r6,lr}
;;;11     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;12     	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
;;;13     	NVIC_InitTypeDef NVIC_InitStruct;
;;;14     	
;;;15     	// 使能 TIM2 时钟
;;;16     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
000006  2101              MOVS     r1,#1
000008  4608              MOV      r0,r1
00000a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;17     	
;;;18     	// 初始化时基单元
;;;19     	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
00000e  2000              MOVS     r0,#0
000010  f8ad000c          STRH     r0,[sp,#0xc]
;;;20     	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;  // 向上计数
000014  f8ad0006          STRH     r0,[sp,#6]
;;;21     	TIM_TimeBaseInitStruct.TIM_Period = period;
000018  9502              STR      r5,[sp,#8]
;;;22     	TIM_TimeBaseInitStruct.TIM_Prescaler = prescaler;
00001a  f8ad4004          STRH     r4,[sp,#4]
;;;23     	// TIM_TimeBaseInitStruct.TIM_RepetitionCounter = ;  // TIM1, TIM8 才使用
;;;24     	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseInitStruct);
00001e  a901              ADD      r1,sp,#4
000020  f04f4080          MOV      r0,#0x40000000
000024  f7fffffe          BL       TIM_TimeBaseInit
;;;25     	
;;;26     	// 配置 NVIC
;;;27     	NVIC_InitStruct.NVIC_IRQChannel = TIM2_IRQn;
000028  201c              MOVS     r0,#0x1c
00002a  f88d0000          STRB     r0,[sp,#0]
;;;28     	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
00002e  2001              MOVS     r0,#1
000030  f88d0003          STRB     r0,[sp,#3]
;;;29     	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 2;
000034  2002              MOVS     r0,#2
000036  f88d0001          STRB     r0,[sp,#1]
;;;30     	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 2;
00003a  f88d0002          STRB     r0,[sp,#2]
;;;31     	NVIC_Init(&NVIC_InitStruct);
00003e  4668              MOV      r0,sp
000040  f7fffffe          BL       NVIC_Init
;;;32     	
;;;33     	// 清除中断标志
;;;34     	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
000044  2101              MOVS     r1,#1
000046  0788              LSLS     r0,r1,#30
000048  f7fffffe          BL       TIM_ClearITPendingBit
;;;35     	
;;;36     	// 使能中断
;;;37     	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
00004c  2201              MOVS     r2,#1
00004e  4611              MOV      r1,r2
000050  0790              LSLS     r0,r2,#30
000052  f7fffffe          BL       TIM_ITConfig
;;;38     	
;;;39     	// 使能定时器
;;;40     	TIM_Cmd(TIM2, ENABLE);
000056  2101              MOVS     r1,#1
000058  0788              LSLS     r0,r1,#30
00005a  f7fffffe          BL       TIM_Cmd
;;;41     }
00005e  bd7f              POP      {r0-r6,pc}
;;;42     
                          ENDP


                          AREA ||i.tim2_is_int||, CODE, READONLY, ALIGN=2

                  tim2_is_int PROC
;;;64      **/
;;;65     int tim2_is_int(void)
000000  4805              LDR      r0,|L7.24|
;;;66     {
;;;67     	if (flag)
000002  6800              LDR      r0,[r0,#0]  ; flag
000004  b120              CBZ      r0,|L7.16|
;;;68     	{
;;;69     		flag = 0;
000006  2000              MOVS     r0,#0
000008  4903              LDR      r1,|L7.24|
00000a  6008              STR      r0,[r1,#0]  ; flag
;;;70     		return 1;
00000c  2001              MOVS     r0,#1
                  |L7.14|
;;;71     	}
;;;72     	return flag;
;;;73     }
00000e  4770              BX       lr
                  |L7.16|
000010  4801              LDR      r0,|L7.24|
000012  6800              LDR      r0,[r0,#0]            ;72  ; flag
000014  e7fb              B        |L7.14|
;;;74     
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      flag

                          AREA ||.data||, DATA, ALIGN=2

                  flag
                          DCD      0x00000000
                  led0_pwm_cnt
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\SYSTEM\\SRC\\tim.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_tim_c_7a42d516____REV16|
#line 138 "..\\..\\CORE\\core_cmInstr.h"
|__asm___5_tim_c_7a42d516____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_tim_c_7a42d516____REVSH|
#line 153
|__asm___5_tim_c_7a42d516____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_tim_c_7a42d516____RRX|
#line 328
|__asm___5_tim_c_7a42d516____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
