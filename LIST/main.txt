; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\..\obj\main.o --asm_dir=..\..\LIST\ --list_dir=..\..\LIST\ --depend=..\..\obj\main.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\USER -I..\..\CORE -I..\..\FWLIB\inc -I..\..\SYSTEM\INC -IF:\粤嵌\课堂演示-粤嵌1914\3_Cortex-M4应用开发\11_I2C总线原理\USER\RTE -IE:\Kile\ARM\PACK\Keil\STM32F4xx_DFP\1.0.8\Device\Include -IE:\Kile\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DSTM32F40_41xxx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\obj\main.crf main.c]
                          THUMB

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  main PROC
;;;74       */
;;;75     int main(void)
000000  b08a              SUB      sp,sp,#0x28
;;;76     {
;;;77     	// 设置优先级分组为 2 组，即 抢占优先级位数 : 响应优先级位数 = 2 : 2
;;;78     	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
000002  f44f60a0          MOV      r0,#0x500
000006  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;79     	
;;;80      /*!< At this stage the microcontroller clock setting is already configured, 
;;;81            this is done through SystemInit() function which is called from startup
;;;82            files before to branch to application main.
;;;83            To reconfigure the default setting of SystemInit() function, 
;;;84            refer to system_stm32f4xx.c file */
;;;85     
;;;86       /* SysTick end of count event each 10ms */
;;;87       RCC_GetClocksFreq(&RCC_Clocks);
00000a  4831              LDR      r0,|L1.208|
00000c  f7fffffe          BL       RCC_GetClocksFreq
;;;88     #ifdef DELAY_USE_INT	
;;;89     	// 此函数配置 Systick 定时器每 10ms 产生一次中断
;;;90       SysTick_Config(RCC_Clocks.HCLK_Frequency / 100);
;;;91     #else
;;;92     	systick_init(SysTick_CLKSource_HCLK_Div8);   // AHB / 8 作为时钟源
000010  f06f0004          MVN      r0,#4
000014  f7fffffe          BL       systick_init
;;;93     #endif
;;;94       
;;;95       /* Add your application code here */
;;;96       /* Insert 50 ms delay */
;;;97       Delay(5);
000018  2005              MOVS     r0,#5
00001a  f7fffffe          BL       Delay
;;;98       
;;;99     	// 初始化 MCO
;;;100      mco_init();  
00001e  f7fffffe          BL       mco_init
;;;101      
;;;102    	// 初始化 LED
;;;103    	led_init();
000022  f7fffffe          BL       led_init
;;;104    
;;;105    	// 初始化 BEEP
;;;106    	beep_init();
000026  f7fffffe          BL       beep_init
;;;107    	
;;;108    	// 初始化 KEY
;;;109    	key_init();
00002a  f7fffffe          BL       key_init
;;;110    	
;;;111    	// 初始化 USART1
;;;112    	usart1_init(115200);
00002e  f44f30e1          MOV      r0,#0x1c200
000032  f7fffffe          BL       usart1_init
;;;113    	
;;;114    	// 初始化 RS485
;;;115    	rs485_init(9600);
000036  f44f5016          MOV      r0,#0x2580
00003a  f7fffffe          BL       rs485_init
;;;116    	
;;;117    	// 初始化 I2C1
;;;118    	i2c1_init();
00003e  f7fffffe          BL       i2c1_init
;;;119    	
;;;120    	printf("main... \r\n");
000042  a024              ADR      r0,|L1.212|
000044  f7fffffe          BL       __2printf
;;;121    	
;;;122      /* Infinite loop */
;;;123      while (1)
000048  e040              B        |L1.204|
                  |L1.74|
;;;124      {
;;;125    		char str[20] = "Hello world", *s = str;
00004a  2214              MOVS     r2,#0x14
00004c  4924              LDR      r1,|L1.224|
00004e  a805              ADD      r0,sp,#0x14
000050  f7fffffe          BL       __aeabi_memcpy4
000054  ae05              ADD      r6,sp,#0x14
;;;126    		int cnt = 0, total = strlen(str);
000056  2400              MOVS     r4,#0
000058  a805              ADD      r0,sp,#0x14
00005a  f7fffffe          BL       strlen
00005e  4605              MOV      r5,r0
;;;127    		uint8_t addr = 0;
000060  2700              MOVS     r7,#0
;;;128    
;;;129    		printf("total = %d\r\n", total);
000062  4629              MOV      r1,r5
000064  a01f              ADR      r0,|L1.228|
000066  f7fffffe          BL       __2printf
;;;130    		while (1)
00006a  e02e              B        |L1.202|
                  |L1.108|
;;;131    		{
;;;132    			cnt = i2c1_24c02_page_write((uint8_t *) s, strlen(s), addr);
00006c  4630              MOV      r0,r6
00006e  f7fffffe          BL       strlen
000072  4680              MOV      r8,r0
000074  463a              MOV      r2,r7
000076  4641              MOV      r1,r8
000078  4630              MOV      r0,r6
00007a  f7fffffe          BL       i2c1_24c02_page_write
00007e  4604              MOV      r4,r0
;;;133    			//cnt = 11;
;;;134    			if (-1 == cnt)
000080  f1b43fff          CMP      r4,#0xffffffff
000084  d104              BNE      |L1.144|
;;;135    			{
;;;136    				printf("写入 24C02 失败\r\n");
000086  a01b              ADR      r0,|L1.244|
000088  f7fffffe          BL       __2printf
;;;137    				while (1);
00008c  bf00              NOP      
                  |L1.142|
00008e  e7fe              B        |L1.142|
                  |L1.144|
;;;138    			}
;;;139    			else
;;;140    			{
;;;141    				printf("成功写入 %d 个字节\r\n", cnt);
000090  4621              MOV      r1,r4
000092  a01d              ADR      r0,|L1.264|
000094  f7fffffe          BL       __2printf
;;;142    				total -= cnt;
000098  1b2d              SUBS     r5,r5,r4
;;;143    				s += cnt;
00009a  4426              ADD      r6,r6,r4
;;;144    				addr += cnt;
00009c  1938              ADDS     r0,r7,r4
00009e  b2c7              UXTB     r7,r0
;;;145    				if (0 == total)
0000a0  b99d              CBNZ     r5,|L1.202|
;;;146    				{
;;;147    					char str2[20] = "";
0000a2  2114              MOVS     r1,#0x14
0000a4  4668              MOV      r0,sp
0000a6  f7fffffe          BL       __aeabi_memclr4
;;;148    					
;;;149    					printf("已全部写完\r\n");
0000aa  a01d              ADR      r0,|L1.288|
0000ac  f7fffffe          BL       __2printf
;;;150    					
;;;151    					cnt = i2c1_24c02_ReadBuffer((uint8_t *) str2, 0, 11);
0000b0  220b              MOVS     r2,#0xb
0000b2  2100              MOVS     r1,#0
0000b4  4668              MOV      r0,sp
0000b6  f7fffffe          BL       i2c1_24c02_ReadBuffer
0000ba  4604              MOV      r4,r0
;;;152    					printf("读取了 %d 个字节：%s\r\n", cnt, str2);
0000bc  466a              MOV      r2,sp
0000be  4621              MOV      r1,r4
0000c0  a01b              ADR      r0,|L1.304|
0000c2  f7fffffe          BL       __2printf
;;;153    					while (1);
0000c6  bf00              NOP      
                  |L1.200|
0000c8  e7fe              B        |L1.200|
                  |L1.202|
0000ca  e7cf              B        |L1.108|
                  |L1.204|
0000cc  e7bd              B        |L1.74|
;;;154    				}
;;;155    			}
;;;156    		}
;;;157      }
;;;158    }
;;;159    
                          ENDP

0000ce  0000              DCW      0x0000
                  |L1.208|
                          DCD      RCC_Clocks
                  |L1.212|
0000d4  6d61696e          DCB      "main... \r\n",0
0000d8  2e2e2e20
0000dc  0d0a00  
0000df  00                DCB      0
                  |L1.224|
                          DCD      ||.constdata||
                  |L1.228|
0000e4  746f7461          DCB      "total = %d\r\n",0
0000e8  6c203d20
0000ec  25640d0a
0000f0  00      
0000f1  00                DCB      0
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L1.244|
0000f4  d0b4c8eb          DCB      208,180,200,235," 24C02 ",202,167,176,220,"\r\n",0
0000f8  20323443
0000fc  303220ca
000100  a7b0dc0d
000104  0a00    
000106  00                DCB      0
000107  00                DCB      0
                  |L1.264|
000108  b3c9b9a6          DCB      179,201,185,166,208,180,200,235," %d ",184,246,215,214,189
00010c  d0b4c8eb
000110  20256420
000114  b8f6d7d6
000118  bd      
000119  da0d0a00          DCB      218,"\r\n",0
00011d  00                DCB      0
00011e  00                DCB      0
00011f  00                DCB      0
                  |L1.288|
000120  d2d1c8ab          DCB      210,209,200,171,178,191,208,180,205,234,"\r\n",0
000124  b2bfd0b4
000128  cdea0d0a
00012c  00      
00012d  00                DCB      0
00012e  00                DCB      0
00012f  00                DCB      0
                  |L1.304|
000130  b6c1c8a1          DCB      182,193,200,161,193,203," %d ",184,246,215,214,189,218,163
000134  c1cb2025
000138  6420b8f6
00013c  d7d6bdda
000140  a3      
000141  ba25730d          DCB      186,"%s\r\n",0
000145  0a00    
000147  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  RCC_Clocks
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  48656c6c          DCB      0x48,0x65,0x6c,0x6c
000004  6f20776f          DCB      0x6f,0x20,0x77,0x6f
000008  726c6400          DCB      0x72,0x6c,0x64,0x00
                          %        8

;*** Start embedded assembler ***

#line 1 "main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 138 "..\\..\\CORE\\core_cmInstr.h"
|__asm___6_main_c_main____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 153
|__asm___6_main_c_main____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____RRX|
#line 328
|__asm___6_main_c_main____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
