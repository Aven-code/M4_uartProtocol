; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\..\obj\system_stm32f4xx.o --asm_dir=..\..\LIST\ --list_dir=..\..\LIST\ --depend=..\..\obj\system_stm32f4xx.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\USER -I..\..\CORE -I..\..\FWLIB\inc -I..\..\SYSTEM\INC -IF:\粤嵌\课堂演示-粤嵌1914\3_Cortex-M4应用开发\11_I2C总线原理\USER\RTE -IE:\Kile\ARM\PACK\Keil\STM32F4xx_DFP\1.0.8\Device\Include -IE:\Kile\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DSTM32F40_41xxx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\obj\system_stm32f4xx.crf system_stm32f4xx.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;654      */
;;;655    static void SetSysClock(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;656    {
;;;657    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
;;;658    /******************************************************************************/
;;;659    /*            PLL (clocked by HSE) used as System clock source                */
;;;660    /******************************************************************************/
;;;661      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2000              MOVS     r0,#0
000004  9001              STR      r0,[sp,#4]
000006  9000              STR      r0,[sp,#0]
;;;662      
;;;663      /* Enable HSE */
;;;664      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000008  4834              LDR      r0,|L1.220|
00000a  6800              LDR      r0,[r0,#0]
00000c  f4403080          ORR      r0,r0,#0x10000
000010  4932              LDR      r1,|L1.220|
000012  6008              STR      r0,[r1,#0]
;;;665     
;;;666      /* Wait till HSE is ready and if Time out is reached exit */
;;;667      do
000014  bf00              NOP      
                  |L1.22|
;;;668      {
;;;669        HSEStatus = RCC->CR & RCC_CR_HSERDY;
000016  4831              LDR      r0,|L1.220|
000018  6800              LDR      r0,[r0,#0]
00001a  f4003000          AND      r0,r0,#0x20000
00001e  9000              STR      r0,[sp,#0]
;;;670        StartUpCounter++;
000020  9801              LDR      r0,[sp,#4]
000022  1c40              ADDS     r0,r0,#1
000024  9001              STR      r0,[sp,#4]
;;;671      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000026  9800              LDR      r0,[sp,#0]
000028  b918              CBNZ     r0,|L1.50|
00002a  9801              LDR      r0,[sp,#4]
00002c  f5b04fa0          CMP      r0,#0x5000
000030  d1f1              BNE      |L1.22|
                  |L1.50|
;;;672    
;;;673      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
000032  482a              LDR      r0,|L1.220|
000034  6800              LDR      r0,[r0,#0]
000036  f4003000          AND      r0,r0,#0x20000
00003a  b110              CBZ      r0,|L1.66|
;;;674      {
;;;675        HSEStatus = (uint32_t)0x01;
00003c  2001              MOVS     r0,#1
00003e  9000              STR      r0,[sp,#0]
000040  e001              B        |L1.70|
                  |L1.66|
;;;676      }
;;;677      else
;;;678      {
;;;679        HSEStatus = (uint32_t)0x00;
000042  2000              MOVS     r0,#0
000044  9000              STR      r0,[sp,#0]
                  |L1.70|
;;;680      }
;;;681    
;;;682      if (HSEStatus == (uint32_t)0x01)
000046  9800              LDR      r0,[sp,#0]
000048  2801              CMP      r0,#1
00004a  d146              BNE      |L1.218|
;;;683      {
;;;684        /* Select regulator voltage output Scale 1 mode */
;;;685        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
00004c  4823              LDR      r0,|L1.220|
00004e  3040              ADDS     r0,r0,#0x40
000050  6800              LDR      r0,[r0,#0]
000052  f0405080          ORR      r0,r0,#0x10000000
000056  4921              LDR      r1,|L1.220|
000058  3140              ADDS     r1,r1,#0x40
00005a  6008              STR      r0,[r1,#0]
;;;686        PWR->CR |= PWR_CR_VOS;
00005c  4820              LDR      r0,|L1.224|
00005e  6800              LDR      r0,[r0,#0]
000060  f4404040          ORR      r0,r0,#0xc000
000064  491e              LDR      r1,|L1.224|
000066  6008              STR      r0,[r1,#0]
;;;687    
;;;688        /* HCLK = SYSCLK / 1*/
;;;689        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
000068  481c              LDR      r0,|L1.220|
00006a  3008              ADDS     r0,r0,#8
00006c  6800              LDR      r0,[r0,#0]
00006e  491b              LDR      r1,|L1.220|
000070  3108              ADDS     r1,r1,#8
000072  6008              STR      r0,[r1,#0]
;;;690    
;;;691    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
;;;692        /* PCLK2 = HCLK / 2*/
;;;693        RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
000074  4608              MOV      r0,r1
000076  6800              LDR      r0,[r0,#0]
000078  f4404000          ORR      r0,r0,#0x8000
00007c  6008              STR      r0,[r1,#0]
;;;694        
;;;695        /* PCLK1 = HCLK / 4*/
;;;696        RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
00007e  4608              MOV      r0,r1
000080  6800              LDR      r0,[r0,#0]
000082  f44050a0          ORR      r0,r0,#0x1400
000086  6008              STR      r0,[r1,#0]
;;;697    #endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx  || STM32F412xG || STM32F446xx || STM32F469_479xx */
;;;698    
;;;699    #if defined(STM32F401xx) || defined(STM32F413_423xx)
;;;700        /* PCLK2 = HCLK / 1*/
;;;701        RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;702        
;;;703        /* PCLK1 = HCLK / 2*/
;;;704        RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;705    #endif /* STM32F401xx || STM32F413_423xx */
;;;706    
;;;707    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
;;;708        /* Configure the main PLL */
;;;709        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
000088  4816              LDR      r0,|L1.228|
00008a  1f09              SUBS     r1,r1,#4
00008c  6008              STR      r0,[r1,#0]
;;;710                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;711    #endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */
;;;712    
;;;713    #if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
;;;714        /* Configure the main PLL */
;;;715        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
;;;716                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
;;;717    #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
;;;718        
;;;719        /* Enable the main PLL */
;;;720        RCC->CR |= RCC_CR_PLLON;
00008e  1f08              SUBS     r0,r1,#4
000090  6800              LDR      r0,[r0,#0]
000092  f0407080          ORR      r0,r0,#0x1000000
000096  1f09              SUBS     r1,r1,#4
000098  6008              STR      r0,[r1,#0]
;;;721    
;;;722        /* Wait till the main PLL is ready */
;;;723        while((RCC->CR & RCC_CR_PLLRDY) == 0)
00009a  bf00              NOP      
                  |L1.156|
00009c  480f              LDR      r0,|L1.220|
00009e  6800              LDR      r0,[r0,#0]
0000a0  f0007000          AND      r0,r0,#0x2000000
0000a4  2800              CMP      r0,#0
0000a6  d0f9              BEQ      |L1.156|
;;;724        {
;;;725        }
;;;726       
;;;727    #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
;;;728        /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
;;;729        PWR->CR |= PWR_CR_ODEN;
;;;730        while((PWR->CSR & PWR_CSR_ODRDY) == 0)
;;;731        {
;;;732        }
;;;733        PWR->CR |= PWR_CR_ODSWEN;
;;;734        while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
;;;735        {
;;;736        }      
;;;737        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;738        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
;;;739    #endif /* STM32F427_437x || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
;;;740    
;;;741    #if defined(STM32F40_41xxx)  || defined(STM32F412xG)  
;;;742        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;743        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
0000a8  f2407005          MOV      r0,#0x705
0000ac  490e              LDR      r1,|L1.232|
0000ae  6008              STR      r0,[r1,#0]
;;;744    #endif /* STM32F40_41xxx  || STM32F412xG */
;;;745    
;;;746    #if defined(STM32F413_423xx)  
;;;747        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;748        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_3WS;
;;;749    #endif /* STM32F413_423xx */
;;;750    
;;;751    #if defined(STM32F401xx)
;;;752        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;753        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;754    #endif /* STM32F401xx */
;;;755    
;;;756        /* Select the main PLL as system clock source */
;;;757        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
0000b0  480a              LDR      r0,|L1.220|
0000b2  3008              ADDS     r0,r0,#8
0000b4  6800              LDR      r0,[r0,#0]
0000b6  f0200003          BIC      r0,r0,#3
0000ba  4908              LDR      r1,|L1.220|
0000bc  3108              ADDS     r1,r1,#8
0000be  6008              STR      r0,[r1,#0]
;;;758        RCC->CFGR |= RCC_CFGR_SW_PLL;
0000c0  4608              MOV      r0,r1
0000c2  6800              LDR      r0,[r0,#0]
0000c4  f0400002          ORR      r0,r0,#2
0000c8  6008              STR      r0,[r1,#0]
;;;759    
;;;760        /* Wait till the main PLL is used as system clock source */
;;;761        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
0000ca  bf00              NOP      
                  |L1.204|
0000cc  4803              LDR      r0,|L1.220|
0000ce  3008              ADDS     r0,r0,#8
0000d0  6800              LDR      r0,[r0,#0]
0000d2  f000000c          AND      r0,r0,#0xc
0000d6  2808              CMP      r0,#8
0000d8  d1f8              BNE      |L1.204|
                  |L1.218|
;;;762        {
;;;763        }
;;;764      }
;;;765      else
;;;766      { /* If HSE fails to start-up, the application will have wrong clock
;;;767             configuration. User can add here some code to deal with this error */
;;;768      }
;;;769    #elif defined(STM32F410xx) || defined(STM32F411xE)
;;;770    #if defined(USE_HSE_BYPASS) 
;;;771    /******************************************************************************/
;;;772    /*            PLL (clocked by HSE) used as System clock source                */
;;;773    /******************************************************************************/
;;;774      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
;;;775      
;;;776      /* Enable HSE and HSE BYPASS */
;;;777      RCC->CR |= ((uint32_t)RCC_CR_HSEON | RCC_CR_HSEBYP);
;;;778     
;;;779      /* Wait till HSE is ready and if Time out is reached exit */
;;;780      do
;;;781      {
;;;782        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;783        StartUpCounter++;
;;;784      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
;;;785    
;;;786      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
;;;787      {
;;;788        HSEStatus = (uint32_t)0x01;
;;;789      }
;;;790      else
;;;791      {
;;;792        HSEStatus = (uint32_t)0x00;
;;;793      }
;;;794    
;;;795      if (HSEStatus == (uint32_t)0x01)
;;;796      {
;;;797        /* Select regulator voltage output Scale 1 mode */
;;;798        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
;;;799        PWR->CR |= PWR_CR_VOS;
;;;800    
;;;801        /* HCLK = SYSCLK / 1*/
;;;802        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
;;;803    
;;;804        /* PCLK2 = HCLK / 2*/
;;;805        RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;806        
;;;807        /* PCLK1 = HCLK / 4*/
;;;808        RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;809    
;;;810        /* Configure the main PLL */
;;;811        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
;;;812                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;813        
;;;814        /* Enable the main PLL */
;;;815        RCC->CR |= RCC_CR_PLLON;
;;;816    
;;;817        /* Wait till the main PLL is ready */
;;;818        while((RCC->CR & RCC_CR_PLLRDY) == 0)
;;;819        {
;;;820        }
;;;821    
;;;822        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;823        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;824    
;;;825        /* Select the main PLL as system clock source */
;;;826        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
;;;827        RCC->CFGR |= RCC_CFGR_SW_PLL;
;;;828    
;;;829        /* Wait till the main PLL is used as system clock source */
;;;830        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
;;;831        {
;;;832        }
;;;833      }
;;;834      else
;;;835      { /* If HSE fails to start-up, the application will have wrong clock
;;;836             configuration. User can add here some code to deal with this error */
;;;837      }
;;;838    #else /* HSI will be used as PLL clock source */
;;;839      /* Select regulator voltage output Scale 1 mode */
;;;840      RCC->APB1ENR |= RCC_APB1ENR_PWREN;
;;;841      PWR->CR |= PWR_CR_VOS;
;;;842      
;;;843      /* HCLK = SYSCLK / 1*/
;;;844      RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
;;;845      
;;;846      /* PCLK2 = HCLK / 2*/
;;;847      RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;848      
;;;849      /* PCLK1 = HCLK / 4*/
;;;850      RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;851      
;;;852      /* Configure the main PLL */
;;;853      RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (PLL_Q << 24); 
;;;854      
;;;855      /* Enable the main PLL */
;;;856      RCC->CR |= RCC_CR_PLLON;
;;;857      
;;;858      /* Wait till the main PLL is ready */
;;;859      while((RCC->CR & RCC_CR_PLLRDY) == 0)
;;;860      {
;;;861      }
;;;862      
;;;863      /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;864      FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;865      
;;;866      /* Select the main PLL as system clock source */
;;;867      RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
;;;868      RCC->CFGR |= RCC_CFGR_SW_PLL;
;;;869      
;;;870      /* Wait till the main PLL is used as system clock source */
;;;871      while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
;;;872      {
;;;873      }
;;;874    #endif /* USE_HSE_BYPASS */  
;;;875    #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
;;;876    }
0000da  bd0c              POP      {r2,r3,pc}
;;;877    #if defined (DATA_IN_ExtSRAM) && defined (DATA_IN_ExtSDRAM)
                          ENDP

                  |L1.220|
                          DCD      0x40023800
                  |L1.224|
                          DCD      0x40007000
                  |L1.228|
                          DCD      0x07405408
                  |L1.232|
                          DCD      0x40023c00

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;560      */
;;;561    void SystemCoreClockUpdate(void)
000000  b570              PUSH     {r4-r6,lr}
;;;562    {
;;;563      uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
000002  2000              MOVS     r0,#0
000004  2200              MOVS     r2,#0
000006  2302              MOVS     r3,#2
000008  2400              MOVS     r4,#0
00000a  2102              MOVS     r1,#2
;;;564    #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
;;;565      uint32_t pllr = 2;
;;;566    #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
;;;567      /* Get SYSCLK source -------------------------------------------------------*/
;;;568      tmp = RCC->CFGR & RCC_CFGR_SWS;
00000c  4d27              LDR      r5,|L2.172|
00000e  682d              LDR      r5,[r5,#0]
000010  f005000c          AND      r0,r5,#0xc
;;;569    
;;;570      switch (tmp)
000014  b120              CBZ      r0,|L2.32|
000016  2804              CMP      r0,#4
000018  d006              BEQ      |L2.40|
00001a  2808              CMP      r0,#8
00001c  d134              BNE      |L2.136|
00001e  e007              B        |L2.48|
                  |L2.32|
;;;571      {
;;;572        case 0x00:  /* HSI used as system clock source */
;;;573          SystemCoreClock = HSI_VALUE;
000020  4d23              LDR      r5,|L2.176|
000022  4e24              LDR      r6,|L2.180|
000024  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;574          break;
000026  e033              B        |L2.144|
                  |L2.40|
;;;575        case 0x04:  /* HSE used as system clock source */
;;;576          SystemCoreClock = HSE_VALUE;
000028  4d23              LDR      r5,|L2.184|
00002a  4e22              LDR      r6,|L2.180|
00002c  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;577          break;
00002e  e02f              B        |L2.144|
                  |L2.48|
;;;578        case 0x08:  /* PLL P used as system clock source */
;;;579           /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;580             SYSCLK = PLL_VCO / PLL_P
;;;581             */    
;;;582          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
000030  4d1e              LDR      r5,|L2.172|
000032  1f2d              SUBS     r5,r5,#4
000034  682d              LDR      r5,[r5,#0]
000036  f3c55480          UBFX     r4,r5,#22,#1
;;;583          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
00003a  4d1c              LDR      r5,|L2.172|
00003c  1f2d              SUBS     r5,r5,#4
00003e  682d              LDR      r5,[r5,#0]
000040  f005013f          AND      r1,r5,#0x3f
;;;584          
;;;585    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
;;;586          if (pllsource != 0)
000044  b154              CBZ      r4,|L2.92|
;;;587          {
;;;588            /* HSE used as PLL clock source */
;;;589            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
000046  4d1c              LDR      r5,|L2.184|
000048  fbb5f5f1          UDIV     r5,r5,r1
00004c  4e17              LDR      r6,|L2.172|
00004e  1f36              SUBS     r6,r6,#4
000050  6836              LDR      r6,[r6,#0]
000052  f3c61688          UBFX     r6,r6,#6,#9
000056  fb05f206          MUL      r2,r5,r6
00005a  e009              B        |L2.112|
                  |L2.92|
;;;590          }
;;;591          else
;;;592          {
;;;593            /* HSI used as PLL clock source */
;;;594            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
00005c  4d14              LDR      r5,|L2.176|
00005e  fbb5f5f1          UDIV     r5,r5,r1
000062  4e12              LDR      r6,|L2.172|
000064  1f36              SUBS     r6,r6,#4
000066  6836              LDR      r6,[r6,#0]
000068  f3c61688          UBFX     r6,r6,#6,#9
00006c  fb05f206          MUL      r2,r5,r6
                  |L2.112|
;;;595          }
;;;596    #elif defined(STM32F410xx) || defined(STM32F411xE)
;;;597    #if defined(USE_HSE_BYPASS)
;;;598          if (pllsource != 0)
;;;599          {
;;;600            /* HSE used as PLL clock source */
;;;601            pllvco = (HSE_BYPASS_INPUT_FREQUENCY / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;602          }  
;;;603    #else  
;;;604          if (pllsource == 0)
;;;605          {
;;;606            /* HSI used as PLL clock source */
;;;607            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;608          }  
;;;609    #endif /* USE_HSE_BYPASS */  
;;;610    #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
;;;611          pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
000070  4d0e              LDR      r5,|L2.172|
000072  1f2d              SUBS     r5,r5,#4
000074  682d              LDR      r5,[r5,#0]
000076  f3c54501          UBFX     r5,r5,#16,#2
00007a  1c6d              ADDS     r5,r5,#1
00007c  006b              LSLS     r3,r5,#1
;;;612          SystemCoreClock = pllvco/pllp;      
00007e  fbb2f5f3          UDIV     r5,r2,r3
000082  4e0c              LDR      r6,|L2.180|
000084  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;613          break;
000086  e003              B        |L2.144|
                  |L2.136|
;;;614    #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)      
;;;615          case 0x0C:  /* PLL R used as system clock source */
;;;616           /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;617             SYSCLK = PLL_VCO / PLL_R
;;;618             */    
;;;619          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
;;;620          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
;;;621          if (pllsource != 0)
;;;622          {
;;;623            /* HSE used as PLL clock source */
;;;624            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;625          }
;;;626          else
;;;627          {
;;;628            /* HSI used as PLL clock source */
;;;629            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
;;;630          }
;;;631     
;;;632          pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
;;;633          SystemCoreClock = pllvco/pllr;      
;;;634          break;
;;;635    #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
;;;636        default:
;;;637          SystemCoreClock = HSI_VALUE;
000088  4d09              LDR      r5,|L2.176|
00008a  4e0a              LDR      r6,|L2.180|
00008c  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;638          break;
00008e  bf00              NOP      
                  |L2.144|
000090  bf00              NOP                            ;574
;;;639      }
;;;640      /* Compute HCLK frequency --------------------------------------------------*/
;;;641      /* Get HCLK prescaler */
;;;642      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000092  4d06              LDR      r5,|L2.172|
000094  682d              LDR      r5,[r5,#0]
000096  f3c51503          UBFX     r5,r5,#4,#4
00009a  4e08              LDR      r6,|L2.188|
00009c  5d70              LDRB     r0,[r6,r5]
;;;643      /* HCLK frequency */
;;;644      SystemCoreClock >>= tmp;
00009e  4d05              LDR      r5,|L2.180|
0000a0  682d              LDR      r5,[r5,#0]  ; SystemCoreClock
0000a2  40c5              LSRS     r5,r5,r0
0000a4  4e03              LDR      r6,|L2.180|
0000a6  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;645    }
0000a8  bd70              POP      {r4-r6,pc}
;;;646    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L2.172|
                          DCD      0x40023808
                  |L2.176|
                          DCD      0x00f42400
                  |L2.180|
                          DCD      SystemCoreClock
                  |L2.184|
                          DCD      0x007a1200
                  |L2.188|
                          DCD      AHBPrescTable

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;483      */
;;;484    void SystemInit(void)
000000  b510              PUSH     {r4,lr}
;;;485    {
;;;486      /* FPU settings ------------------------------------------------------------*/
;;;487      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;488        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
000002  4815              LDR      r0,|L3.88|
000004  6800              LDR      r0,[r0,#0]
000006  f4400070          ORR      r0,r0,#0xf00000
00000a  4913              LDR      r1,|L3.88|
00000c  6008              STR      r0,[r1,#0]
;;;489      #endif
;;;490      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;491      /* Set HSION bit */
;;;492      RCC->CR |= (uint32_t)0x00000001;
00000e  4813              LDR      r0,|L3.92|
000010  6800              LDR      r0,[r0,#0]
000012  f0400001          ORR      r0,r0,#1
000016  4911              LDR      r1,|L3.92|
000018  6008              STR      r0,[r1,#0]
;;;493    
;;;494      /* Reset CFGR register */
;;;495      RCC->CFGR = 0x00000000;
00001a  2000              MOVS     r0,#0
00001c  490f              LDR      r1,|L3.92|
00001e  3108              ADDS     r1,r1,#8
000020  6008              STR      r0,[r1,#0]
;;;496    
;;;497      /* Reset HSEON, CSSON and PLLON bits */
;;;498      RCC->CR &= (uint32_t)0xFEF6FFFF;
000022  480e              LDR      r0,|L3.92|
000024  6800              LDR      r0,[r0,#0]
000026  490e              LDR      r1,|L3.96|
000028  4008              ANDS     r0,r0,r1
00002a  490c              LDR      r1,|L3.92|
00002c  6008              STR      r0,[r1,#0]
;;;499    
;;;500      /* Reset PLLCFGR register */
;;;501      RCC->PLLCFGR = 0x24003010;
00002e  480d              LDR      r0,|L3.100|
000030  1d09              ADDS     r1,r1,#4
000032  6008              STR      r0,[r1,#0]
;;;502    
;;;503      /* Reset HSEBYP bit */
;;;504      RCC->CR &= (uint32_t)0xFFFBFFFF;
000034  1f08              SUBS     r0,r1,#4
000036  6800              LDR      r0,[r0,#0]
000038  f4202080          BIC      r0,r0,#0x40000
00003c  1f09              SUBS     r1,r1,#4
00003e  6008              STR      r0,[r1,#0]
;;;505    
;;;506      /* Disable all interrupts */
;;;507      RCC->CIR = 0x00000000;
000040  2000              MOVS     r0,#0
000042  4906              LDR      r1,|L3.92|
000044  310c              ADDS     r1,r1,#0xc
000046  6008              STR      r0,[r1,#0]
;;;508    
;;;509    #if defined(DATA_IN_ExtSRAM) || defined(DATA_IN_ExtSDRAM)
;;;510      SystemInit_ExtMemCtl(); 
;;;511    #endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
;;;512             
;;;513      /* Configure the System clock source, PLL Multiplier and Divider factors, 
;;;514         AHB/APBx prescalers and Flash settings ----------------------------------*/
;;;515      SetSysClock();
000048  f7fffffe          BL       SetSysClock
;;;516    
;;;517      /* Configure the Vector Table location add offset address ------------------*/
;;;518    #ifdef VECT_TAB_SRAM
;;;519      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;520    #else
;;;521      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
00004c  f04f6000          MOV      r0,#0x8000000
000050  4901              LDR      r1,|L3.88|
000052  3980              SUBS     r1,r1,#0x80
000054  6008              STR      r0,[r1,#0]
;;;522    #endif
;;;523    }
000056  bd10              POP      {r4,pc}
;;;524    
                          ENDP

                  |L3.88|
                          DCD      0xe000ed88
                  |L3.92|
                          DCD      0x40023800
                  |L3.96|
                          DCD      0xfef6ffff
                  |L3.100|
                          DCD      0x24003010

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x0a037a00
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "system_stm32f4xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REV16|
#line 138 "..\\..\\CORE\\core_cmInstr.h"
|__asm___18_system_stm32f4xx_c_5d646a67____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REVSH|
#line 153
|__asm___18_system_stm32f4xx_c_5d646a67____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____RRX|
#line 328
|__asm___18_system_stm32f4xx_c_5d646a67____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
