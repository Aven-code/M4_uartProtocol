; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\..\obj\i2c.o --asm_dir=..\..\LIST\ --list_dir=..\..\LIST\ --depend=..\..\obj\i2c.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\USER -I..\..\CORE -I..\..\FWLIB\inc -I..\..\SYSTEM\INC -IF:\粤嵌\课堂演示-粤嵌1914\3_Cortex-M4应用开发\11_I2C总线原理\USER\RTE -IE:\Kile\ARM\PACK\Keil\STM32F4xx_DFP\1.0.8\Device\Include -IE:\Kile\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DSTM32F40_41xxx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\obj\i2c.crf ..\..\SYSTEM\SRC\i2c.c]
                          THUMB

                          AREA ||i.i2c1_24c02_ReadBuffer||, CODE, READONLY, ALIGN=2

                  i2c1_24c02_ReadBuffer PROC
;;;200     **/
;;;201    int i2c1_24c02_ReadBuffer(uint8_t *buf, uint8_t addr, uint8_t size)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;202    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
;;;203    	uint32_t timeout = I2C_TIMEOUT;
00000a  4c63              LDR      r4,|L1.408|
;;;204    	int i;
;;;205    	
;;;206    	// 0 个不读取
;;;207    	if (0 == size)
00000c  b916              CBNZ     r6,|L1.20|
;;;208    	{
;;;209    		return 0;
00000e  2000              MOVS     r0,#0
                  |L1.16|
;;;210    	}
;;;211    	
;;;212    	// 避免超过 24C02 芯片内存范围
;;;213    	if (addr + size > M24C02_SIZE)
;;;214    	{
;;;215    		size = M24C02_SIZE - addr;
;;;216    	}
;;;217    	
;;;218    	// 1. 总线忙等待
;;;219      while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY))
;;;220      {
;;;221        if((timeout--) == 0) return -1;
;;;222      }
;;;223    	
;;;224    	// 2. 起始位
;;;225    	I2C_GenerateSTART(I2C1, ENABLE);
;;;226    	// 测试 EV5 事件并清除它
;;;227    	timeout = I2C_TIMEOUT;
;;;228      while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
;;;229      {
;;;230        if((timeout--) == 0) return -1;
;;;231      }
;;;232    	
;;;233    	// 3. 总线寻址 24C02 写
;;;234    	I2C_Send7bitAddress(I2C1, M24C02_ADDRESS, I2C_Direction_Transmitter);
;;;235    	// 测试 EV6 事件并清除它
;;;236    	timeout = I2C_TIMEOUT;
;;;237      while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
;;;238      {
;;;239        if((timeout--) == 0) return -1;
;;;240      } 
;;;241    	
;;;242    	// 4. 24C02 片内寻址写
;;;243    	I2C_SendData(I2C1, addr);
;;;244    	// 测试 EV8 事件并清除它
;;;245    	timeout = I2C_TIMEOUT;
;;;246      //while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BTF) == RESET)
;;;247    	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTING))   // 检查 EV8
;;;248      {
;;;249        if((timeout--) == 0) return -1;
;;;250      }
;;;251    	
;;;252    	// 5. 重复起始位
;;;253    	I2C_GenerateSTART(I2C1, ENABLE);
;;;254    	// 测试 EV5 事件并清除它
;;;255    	timeout = I2C_TIMEOUT;
;;;256      while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
;;;257      {
;;;258        if((timeout--) == 0) return -1;
;;;259      }
;;;260    	
;;;261    	// 6. 总线寻址 24C02 读
;;;262    	I2C_Send7bitAddress(I2C1, M24C02_ADDRESS, I2C_Direction_Receiver); 
;;;263    	// 等待地址标志置位(此时地址标志还未清除)
;;;264    	timeout = I2C_TIMEOUT;
;;;265    	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_ADDR) == RESET)
;;;266    	{
;;;267    		if((timeout--) == 0) return -1;
;;;268    	}   
;;;269    	
;;;270    	// 通过读 SR1 和 SR2 寄存器来清除地址标志(SR1 已读过)
;;;271    	(void) I2C1->SR2;
;;;272    	
;;;273    	// 应答
;;;274    	I2C_AcknowledgeConfig(I2C1, ENABLE); 
;;;275    	
;;;276    	// 7. 开始读取前 size - 1 个字节数据
;;;277    	for (i = 0; i < size - 1; i++)
;;;278    	{
;;;279    		// 等待可读
;;;280    		timeout = I2C_TIMEOUT;
;;;281    		//while(I2C_GetFlagStatus(I2C1, I2C_FLAG_RXNE) == RESET)    // 接收非空
;;;282    		while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED))  // 检查 EV7
;;;283    		{
;;;284    			if((timeout--) == 0) return i;
;;;285    		}
;;;286    		
;;;287    		// 读取数据
;;;288    		buf[i] = I2C_ReceiveData(I2C1);
;;;289    	}
;;;290    	
;;;291    	// 禁用应答、读 DR 寄存器、发送停止位、EV7 共用构成 EV7_1
;;;292    	// 禁用应答
;;;293    	I2C_AcknowledgeConfig(I2C1, DISABLE); 
;;;294    	
;;;295    	// 8. 停止位
;;;296    	I2C_GenerateSTOP(I2C1, ENABLE);
;;;297    	
;;;298    	// 等待可读
;;;299    	timeout = I2C_TIMEOUT;
;;;300    	//while(I2C_GetFlagStatus(I2C1, I2C_FLAG_RXNE) == RESET)
;;;301    	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED))  // 检查 EV7
;;;302    	{
;;;303    		if((timeout--) == 0) return i;
;;;304    	}
;;;305    		
;;;306    	// 读取最后一个数据
;;;307    	buf[i] = I2C_ReceiveData(I2C1);
;;;308    	
;;;309    	// 等待停止位被清除
;;;310    	timeout = I2C_TIMEOUT;
;;;311    	while(I2C1->CR1 & I2C_CR1_STOP)
;;;312    	{
;;;313    		if((timeout--) == 0) return -1;
;;;314    	}  
;;;315    	
;;;316    	// 重新使能应答，准备下一次读
;;;317    	I2C_AcknowledgeConfig(I2C1, ENABLE);  
;;;318    
;;;319    	return size;
;;;320    }
000010  e8bd81f0          POP      {r4-r8,pc}
                  |L1.20|
000014  eb080006          ADD      r0,r8,r6              ;213
000018  f5b07f80          CMP      r0,#0x100             ;213
00001c  dd02              BLE      |L1.36|
00001e  f1c80000          RSB      r0,r8,#0              ;215
000022  b2c6              UXTB     r6,r0                 ;215
                  |L1.36|
000024  e005              B        |L1.50|
                  |L1.38|
000026  0020              MOVS     r0,r4                 ;221
000028  f1a40401          SUB      r4,r4,#1              ;221
00002c  d101              BNE      |L1.50|
00002e  1e40              SUBS     r0,r0,#1              ;221
000030  e7ee              B        |L1.16|
                  |L1.50|
000032  f44f3100          MOV      r1,#0x20000           ;219
000036  4859              LDR      r0,|L1.412|
000038  f7fffffe          BL       I2C_GetFlagStatus
00003c  2800              CMP      r0,#0                 ;219
00003e  d1f2              BNE      |L1.38|
000040  2101              MOVS     r1,#1                 ;225
000042  4856              LDR      r0,|L1.412|
000044  f7fffffe          BL       I2C_GenerateSTART
000048  4c53              LDR      r4,|L1.408|
00004a  e005              B        |L1.88|
                  |L1.76|
00004c  0020              MOVS     r0,r4                 ;230
00004e  f1a40401          SUB      r4,r4,#1              ;230
000052  d101              BNE      |L1.88|
000054  1e40              SUBS     r0,r0,#1              ;230
000056  e7db              B        |L1.16|
                  |L1.88|
000058  4951              LDR      r1,|L1.416|
00005a  4850              LDR      r0,|L1.412|
00005c  f7fffffe          BL       I2C_CheckEvent
000060  2800              CMP      r0,#0                 ;228
000062  d0f3              BEQ      |L1.76|
000064  2200              MOVS     r2,#0                 ;234
000066  21a0              MOVS     r1,#0xa0              ;234
000068  484c              LDR      r0,|L1.412|
00006a  f7fffffe          BL       I2C_Send7bitAddress
00006e  4c4a              LDR      r4,|L1.408|
000070  e005              B        |L1.126|
                  |L1.114|
000072  0020              MOVS     r0,r4                 ;239
000074  f1a40401          SUB      r4,r4,#1              ;239
000078  d101              BNE      |L1.126|
00007a  1e40              SUBS     r0,r0,#1              ;239
00007c  e7c8              B        |L1.16|
                  |L1.126|
00007e  4949              LDR      r1,|L1.420|
000080  4846              LDR      r0,|L1.412|
000082  f7fffffe          BL       I2C_CheckEvent
000086  2800              CMP      r0,#0                 ;237
000088  d0f3              BEQ      |L1.114|
00008a  4641              MOV      r1,r8                 ;243
00008c  4843              LDR      r0,|L1.412|
00008e  f7fffffe          BL       I2C_SendData
000092  4c41              LDR      r4,|L1.408|
000094  e005              B        |L1.162|
                  |L1.150|
000096  0020              MOVS     r0,r4                 ;249
000098  f1a40401          SUB      r4,r4,#1              ;249
00009c  d101              BNE      |L1.162|
00009e  1e40              SUBS     r0,r0,#1              ;249
0000a0  e7b6              B        |L1.16|
                  |L1.162|
0000a2  4940              LDR      r1,|L1.420|
0000a4  1e89              SUBS     r1,r1,#2              ;247
0000a6  483d              LDR      r0,|L1.412|
0000a8  f7fffffe          BL       I2C_CheckEvent
0000ac  2800              CMP      r0,#0                 ;247
0000ae  d0f2              BEQ      |L1.150|
0000b0  2101              MOVS     r1,#1                 ;253
0000b2  483a              LDR      r0,|L1.412|
0000b4  f7fffffe          BL       I2C_GenerateSTART
0000b8  4c37              LDR      r4,|L1.408|
0000ba  e005              B        |L1.200|
                  |L1.188|
0000bc  0020              MOVS     r0,r4                 ;258
0000be  f1a40401          SUB      r4,r4,#1              ;258
0000c2  d101              BNE      |L1.200|
0000c4  1e40              SUBS     r0,r0,#1              ;258
0000c6  e7a3              B        |L1.16|
                  |L1.200|
0000c8  4935              LDR      r1,|L1.416|
0000ca  4834              LDR      r0,|L1.412|
0000cc  f7fffffe          BL       I2C_CheckEvent
0000d0  2800              CMP      r0,#0                 ;256
0000d2  d0f3              BEQ      |L1.188|
0000d4  2201              MOVS     r2,#1                 ;262
0000d6  21a0              MOVS     r1,#0xa0              ;262
0000d8  4830              LDR      r0,|L1.412|
0000da  f7fffffe          BL       I2C_Send7bitAddress
0000de  4c2e              LDR      r4,|L1.408|
0000e0  e005              B        |L1.238|
                  |L1.226|
0000e2  0020              MOVS     r0,r4                 ;267
0000e4  f1a40401          SUB      r4,r4,#1              ;267
0000e8  d101              BNE      |L1.238|
0000ea  1e40              SUBS     r0,r0,#1              ;267
0000ec  e790              B        |L1.16|
                  |L1.238|
0000ee  492e              LDR      r1,|L1.424|
0000f0  482a              LDR      r0,|L1.412|
0000f2  f7fffffe          BL       I2C_GetFlagStatus
0000f6  2800              CMP      r0,#0                 ;265
0000f8  d0f3              BEQ      |L1.226|
0000fa  4828              LDR      r0,|L1.412|
0000fc  3018              ADDS     r0,r0,#0x18           ;271
0000fe  8800              LDRH     r0,[r0,#0]            ;271
000100  2101              MOVS     r1,#1                 ;274
000102  4826              LDR      r0,|L1.412|
000104  f7fffffe          BL       I2C_AcknowledgeConfig
000108  2500              MOVS     r5,#0                 ;277
00010a  e013              B        |L1.308|
                  |L1.268|
00010c  4c22              LDR      r4,|L1.408|
00010e  e005              B        |L1.284|
                  |L1.272|
000110  0020              MOVS     r0,r4                 ;284
000112  f1a40401          SUB      r4,r4,#1              ;284
000116  d101              BNE      |L1.284|
000118  4628              MOV      r0,r5                 ;284
00011a  e779              B        |L1.16|
                  |L1.284|
00011c  4920              LDR      r1,|L1.416|
00011e  313f              ADDS     r1,r1,#0x3f           ;282
000120  481e              LDR      r0,|L1.412|
000122  f7fffffe          BL       I2C_CheckEvent
000126  2800              CMP      r0,#0                 ;282
000128  d0f2              BEQ      |L1.272|
00012a  481c              LDR      r0,|L1.412|
00012c  f7fffffe          BL       I2C_ReceiveData
000130  5578              STRB     r0,[r7,r5]            ;288
000132  1c6d              ADDS     r5,r5,#1              ;277
                  |L1.308|
000134  1e70              SUBS     r0,r6,#1              ;277
000136  42a8              CMP      r0,r5                 ;277
000138  dce8              BGT      |L1.268|
00013a  2100              MOVS     r1,#0                 ;293
00013c  4817              LDR      r0,|L1.412|
00013e  f7fffffe          BL       I2C_AcknowledgeConfig
000142  2101              MOVS     r1,#1                 ;296
000144  4815              LDR      r0,|L1.412|
000146  f7fffffe          BL       I2C_GenerateSTOP
00014a  4c13              LDR      r4,|L1.408|
00014c  e005              B        |L1.346|
                  |L1.334|
00014e  0020              MOVS     r0,r4                 ;303
000150  f1a40401          SUB      r4,r4,#1              ;303
000154  d101              BNE      |L1.346|
000156  4628              MOV      r0,r5                 ;303
000158  e75a              B        |L1.16|
                  |L1.346|
00015a  4911              LDR      r1,|L1.416|
00015c  313f              ADDS     r1,r1,#0x3f           ;301
00015e  480f              LDR      r0,|L1.412|
000160  f7fffffe          BL       I2C_CheckEvent
000164  2800              CMP      r0,#0                 ;301
000166  d0f2              BEQ      |L1.334|
000168  480c              LDR      r0,|L1.412|
00016a  f7fffffe          BL       I2C_ReceiveData
00016e  5578              STRB     r0,[r7,r5]            ;307
000170  4c09              LDR      r4,|L1.408|
000172  e005              B        |L1.384|
                  |L1.372|
000174  0020              MOVS     r0,r4                 ;313
000176  f1a40401          SUB      r4,r4,#1              ;313
00017a  d101              BNE      |L1.384|
00017c  1e40              SUBS     r0,r0,#1              ;313
00017e  e747              B        |L1.16|
                  |L1.384|
000180  4806              LDR      r0,|L1.412|
000182  8800              LDRH     r0,[r0,#0]            ;311
000184  f4007000          AND      r0,r0,#0x200          ;311
000188  2800              CMP      r0,#0                 ;311
00018a  d1f3              BNE      |L1.372|
00018c  2101              MOVS     r1,#1                 ;317
00018e  4803              LDR      r0,|L1.412|
000190  f7fffffe          BL       I2C_AcknowledgeConfig
000194  4630              MOV      r0,r6                 ;319
000196  e73b              B        |L1.16|
;;;321    
                          ENDP

                  |L1.408|
                          DCD      0x000fffff
                  |L1.412|
                          DCD      0x40005400
                  |L1.416|
                          DCD      0x00030001
                  |L1.420|
                          DCD      0x00070082
                  |L1.424|
                          DCD      0x10000002

                          AREA ||i.i2c1_24c02_page_write||, CODE, READONLY, ALIGN=2

                  i2c1_24c02_page_write PROC
;;;92      **/
;;;93     int i2c1_24c02_page_write(uint8_t *data, uint32_t size, uint8_t addr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;94     {
000004  4680              MOV      r8,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
;;;95     	// count 是当前页剩余空间（字节数）
;;;96     	uint8_t count = M24C02_PAGE_SIZE - addr % M24C02_PAGE_SIZE;
00000a  4630              MOV      r0,r6
00000c  17f1              ASRS     r1,r6,#31
00000e  eb067151          ADD      r1,r6,r1,LSR #29
000012  10c9              ASRS     r1,r1,#3
000014  eba601c1          SUB      r1,r6,r1,LSL #3
000018  f1c10108          RSB      r1,r1,#8
00001c  b2cd              UXTB     r5,r1
;;;97     	//addr 当前页的第几个字节
;;;98     	uint32_t timeout;
;;;99     	
;;;100    	if (size > count)
00001e  42af              CMP      r7,r5
000020  d900              BLS      |L2.36|
;;;101    	{
;;;102    		size = count;
000022  462f              MOV      r7,r5
                  |L2.36|
;;;103    	}
;;;104    	
;;;105    	// 1. 等待 I2C 总线空闲
;;;106    	// FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG);
;;;107    	timeout = I2C_TIMEOUT;
000024  4c54              LDR      r4,|L2.376|
;;;108    	while (timeout-- && (SET == I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY)));
000026  bf00              NOP      
                  |L2.40|
000028  0020              MOVS     r0,r4
00002a  f1a40401          SUB      r4,r4,#1
00002e  d006              BEQ      |L2.62|
000030  f44f3100          MOV      r1,#0x20000
000034  4851              LDR      r0,|L2.380|
000036  f7fffffe          BL       I2C_GetFlagStatus
00003a  2801              CMP      r0,#1
00003c  d0f4              BEQ      |L2.40|
                  |L2.62|
;;;109    	if (0 == timeout)
00003e  b91c              CBNZ     r4,|L2.72|
;;;110    	{
;;;111    		return -1;
000040  f04f30ff          MOV      r0,#0xffffffff
                  |L2.68|
;;;112    	}
;;;113    	
;;;114    	// 2. 发送起始信号
;;;115    	// void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState);
;;;116    	I2C_GenerateSTART(I2C1, ENABLE);
;;;117    	// 检查 EV5
;;;118    	// ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT);
;;;119    	timeout = I2C_TIMEOUT;
;;;120    	while (timeout-- && (ERROR == I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT)));
;;;121    	if (0 == timeout)
;;;122    	{
;;;123    		return -1;
;;;124    	}
;;;125    	
;;;126    	// 3. 发送 7 位 24C02 地址
;;;127    	// void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction);
;;;128    	I2C_Send7bitAddress(I2C1, M24C02_ADDRESS, I2C_Direction_Transmitter);
;;;129    	// 检查 EV6
;;;130    	timeout = I2C_TIMEOUT;
;;;131    	while (timeout-- && (ERROR == I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)));
;;;132    	if (0 == timeout)
;;;133    	{
;;;134    		return -1;
;;;135    	}
;;;136    	// 检查 EV8
;;;137    	timeout = I2C_TIMEOUT;
;;;138    	while (timeout-- && (ERROR == I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTING)));
;;;139    	if (0 == timeout)
;;;140    	{
;;;141    		return -1;
;;;142    	}
;;;143    	
;;;144    	// 4. 发送片内写地址，这里的地址指的是	字节地址	，因为一共就255个字节
;;;145    	I2C_SendData(I2C1, addr);
;;;146    	// 检查 EV8
;;;147    	timeout = I2C_TIMEOUT;
;;;148    	while (timeout-- && (ERROR == I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTING)));
;;;149    	if (0 == timeout)
;;;150    	{
;;;151    		return -1;
;;;152    	}
;;;153    	
;;;154    	// 5. 发送数据
;;;155    	// 先发前 size - 1 个字节
;;;156    	for (count = 0; count < size - 1; count++)
;;;157    	{
;;;158    		I2C_SendData(I2C1, data[count]);
;;;159    		// 检查 EV8
;;;160    		timeout = I2C_TIMEOUT;
;;;161    		while (timeout-- && (ERROR == I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTING)));
;;;162    		if (0 == timeout)
;;;163    		{
;;;164    			return count;
;;;165    		}
;;;166    	}
;;;167    	
;;;168    	// 发送最后一个字节
;;;169    	I2C_SendData(I2C1, data[count]);
;;;170    	// 检查 EV8_2
;;;171    	timeout = I2C_TIMEOUT;
;;;172    	while (timeout-- && (ERROR == I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED)));
;;;173    	if (0 == timeout)
;;;174    	{
;;;175    		return count;
;;;176    	}
;;;177    	count++;
;;;178    	
;;;179    	// 6. 发送结束信号
;;;180    	I2C_GenerateSTOP(I2C1, ENABLE);
;;;181    	// 等待生成停止位
;;;182    	timeout = I2C_TIMEOUT;
;;;183    	while (timeout-- && (I2C1->CR1 & I2C_CR1_STOP));
;;;184    	if (0 == timeout)
;;;185    	{
;;;186    		return count;
;;;187    	}
;;;188    	
;;;189    	//delay_us(5);
;;;190    	
;;;191    	return size;
;;;192    }
000044  e8bd81f0          POP      {r4-r8,pc}
                  |L2.72|
000048  2101              MOVS     r1,#1                 ;116
00004a  484c              LDR      r0,|L2.380|
00004c  f7fffffe          BL       I2C_GenerateSTART
000050  4c49              LDR      r4,|L2.376|
000052  bf00              NOP                            ;120
                  |L2.84|
000054  0020              MOVS     r0,r4                 ;120
000056  f1a40401          SUB      r4,r4,#1              ;120
00005a  d005              BEQ      |L2.104|
00005c  4948              LDR      r1,|L2.384|
00005e  4847              LDR      r0,|L2.380|
000060  f7fffffe          BL       I2C_CheckEvent
000064  2800              CMP      r0,#0                 ;120
000066  d0f5              BEQ      |L2.84|
                  |L2.104|
000068  b914              CBNZ     r4,|L2.112|
00006a  f04f30ff          MOV      r0,#0xffffffff        ;123
00006e  e7e9              B        |L2.68|
                  |L2.112|
000070  2200              MOVS     r2,#0                 ;128
000072  21a0              MOVS     r1,#0xa0              ;128
000074  4841              LDR      r0,|L2.380|
000076  f7fffffe          BL       I2C_Send7bitAddress
00007a  4c3f              LDR      r4,|L2.376|
00007c  bf00              NOP                            ;131
                  |L2.126|
00007e  0020              MOVS     r0,r4                 ;131
000080  f1a40401          SUB      r4,r4,#1              ;131
000084  d005              BEQ      |L2.146|
000086  493f              LDR      r1,|L2.388|
000088  483c              LDR      r0,|L2.380|
00008a  f7fffffe          BL       I2C_CheckEvent
00008e  2800              CMP      r0,#0                 ;131
000090  d0f5              BEQ      |L2.126|
                  |L2.146|
000092  b914              CBNZ     r4,|L2.154|
000094  f04f30ff          MOV      r0,#0xffffffff        ;134
000098  e7d4              B        |L2.68|
                  |L2.154|
00009a  4c37              LDR      r4,|L2.376|
00009c  bf00              NOP                            ;138
                  |L2.158|
00009e  0020              MOVS     r0,r4                 ;138
0000a0  f1a40401          SUB      r4,r4,#1              ;138
0000a4  d006              BEQ      |L2.180|
0000a6  4937              LDR      r1,|L2.388|
0000a8  1e89              SUBS     r1,r1,#2              ;138
0000aa  4834              LDR      r0,|L2.380|
0000ac  f7fffffe          BL       I2C_CheckEvent
0000b0  2800              CMP      r0,#0                 ;138
0000b2  d0f4              BEQ      |L2.158|
                  |L2.180|
0000b4  b914              CBNZ     r4,|L2.188|
0000b6  f04f30ff          MOV      r0,#0xffffffff        ;141
0000ba  e7c3              B        |L2.68|
                  |L2.188|
0000bc  4631              MOV      r1,r6                 ;145
0000be  482f              LDR      r0,|L2.380|
0000c0  f7fffffe          BL       I2C_SendData
0000c4  4c2c              LDR      r4,|L2.376|
0000c6  bf00              NOP                            ;148
                  |L2.200|
0000c8  0020              MOVS     r0,r4                 ;148
0000ca  f1a40401          SUB      r4,r4,#1              ;148
0000ce  d006              BEQ      |L2.222|
0000d0  492c              LDR      r1,|L2.388|
0000d2  1e89              SUBS     r1,r1,#2              ;148
0000d4  4829              LDR      r0,|L2.380|
0000d6  f7fffffe          BL       I2C_CheckEvent
0000da  2800              CMP      r0,#0                 ;148
0000dc  d0f4              BEQ      |L2.200|
                  |L2.222|
0000de  b914              CBNZ     r4,|L2.230|
0000e0  f04f30ff          MOV      r0,#0xffffffff        ;151
0000e4  e7ae              B        |L2.68|
                  |L2.230|
0000e6  2500              MOVS     r5,#0                 ;156
0000e8  e016              B        |L2.280|
                  |L2.234|
0000ea  f8181005          LDRB     r1,[r8,r5]            ;158
0000ee  4823              LDR      r0,|L2.380|
0000f0  f7fffffe          BL       I2C_SendData
0000f4  4c20              LDR      r4,|L2.376|
0000f6  bf00              NOP                            ;161
                  |L2.248|
0000f8  0020              MOVS     r0,r4                 ;161
0000fa  f1a40401          SUB      r4,r4,#1              ;161
0000fe  d006              BEQ      |L2.270|
000100  4920              LDR      r1,|L2.388|
000102  1e89              SUBS     r1,r1,#2              ;161
000104  481d              LDR      r0,|L2.380|
000106  f7fffffe          BL       I2C_CheckEvent
00010a  2800              CMP      r0,#0                 ;161
00010c  d0f4              BEQ      |L2.248|
                  |L2.270|
00010e  b90c              CBNZ     r4,|L2.276|
000110  4628              MOV      r0,r5                 ;164
000112  e797              B        |L2.68|
                  |L2.276|
000114  1c68              ADDS     r0,r5,#1              ;156
000116  b2c5              UXTB     r5,r0                 ;156
                  |L2.280|
000118  1e78              SUBS     r0,r7,#1              ;156
00011a  42a8              CMP      r0,r5                 ;156
00011c  d8e5              BHI      |L2.234|
00011e  f8181005          LDRB     r1,[r8,r5]            ;169
000122  4816              LDR      r0,|L2.380|
000124  f7fffffe          BL       I2C_SendData
000128  4c13              LDR      r4,|L2.376|
00012a  bf00              NOP                            ;172
                  |L2.300|
00012c  0020              MOVS     r0,r4                 ;172
00012e  f1a40401          SUB      r4,r4,#1              ;172
000132  d006              BEQ      |L2.322|
000134  4913              LDR      r1,|L2.388|
000136  1c89              ADDS     r1,r1,#2              ;172
000138  4810              LDR      r0,|L2.380|
00013a  f7fffffe          BL       I2C_CheckEvent
00013e  2800              CMP      r0,#0                 ;172
000140  d0f4              BEQ      |L2.300|
                  |L2.322|
000142  b90c              CBNZ     r4,|L2.328|
000144  4628              MOV      r0,r5                 ;175
000146  e77d              B        |L2.68|
                  |L2.328|
000148  1c68              ADDS     r0,r5,#1              ;177
00014a  b2c5              UXTB     r5,r0                 ;177
00014c  2101              MOVS     r1,#1                 ;180
00014e  480b              LDR      r0,|L2.380|
000150  f7fffffe          BL       I2C_GenerateSTOP
000154  4c08              LDR      r4,|L2.376|
000156  bf00              NOP                            ;183
                  |L2.344|
000158  0020              MOVS     r0,r4                 ;183
00015a  f1a40401          SUB      r4,r4,#1              ;183
00015e  d005              BEQ      |L2.364|
000160  4806              LDR      r0,|L2.380|
000162  8800              LDRH     r0,[r0,#0]            ;183
000164  f4007000          AND      r0,r0,#0x200          ;183
000168  2800              CMP      r0,#0                 ;183
00016a  d1f5              BNE      |L2.344|
                  |L2.364|
00016c  b90c              CBNZ     r4,|L2.370|
00016e  4628              MOV      r0,r5                 ;186
000170  e768              B        |L2.68|
                  |L2.370|
000172  4638              MOV      r0,r7                 ;191
000174  e766              B        |L2.68|
;;;193    
                          ENDP

000176  0000              DCW      0x0000
                  |L2.376|
                          DCD      0x000fffff
                  |L2.380|
                          DCD      0x40005400
                  |L2.384|
                          DCD      0x00030001
                  |L2.388|
                          DCD      0x00070082

                          AREA ||i.i2c1_init||, CODE, READONLY, ALIGN=2

                  i2c1_init PROC
;;;30      **/
;;;31     void i2c1_init(void)
000000  b500              PUSH     {lr}
;;;32     {
000002  b087              SUB      sp,sp,#0x1c
;;;33     	GPIO_InitTypeDef GPIO_InitStruct;
;;;34     	I2C_InitTypeDef I2C_InitStruct;
;;;35     	
;;;36     	// 使能 GPIOB 时钟
;;;37     	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
000004  2101              MOVS     r1,#1
000006  2002              MOVS     r0,#2
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;38     	
;;;39     	// 使能 I2C1 时钟
;;;40     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0548              LSLS     r0,r1,#21
000010  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;41     	
;;;42     	// 复用 PB8, PB9 为 I2C1
;;;43     	GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_I2C1);
000014  2204              MOVS     r2,#4
000016  2108              MOVS     r1,#8
000018  481b              LDR      r0,|L3.136|
00001a  f7fffffe          BL       GPIO_PinAFConfig
;;;44     	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
00001e  2204              MOVS     r2,#4
000020  2109              MOVS     r1,#9
000022  4819              LDR      r0,|L3.136|
000024  f7fffffe          BL       GPIO_PinAFConfig
;;;45     	
;;;46     	// 配置 PB8, PB9
;;;47     	GPIO_InitStruct.GPIO_Mode  = GPIO_Mode_AF;   // 复用功能
000028  2002              MOVS     r0,#2
00002a  f88d0018          STRB     r0,[sp,#0x18]
;;;48     	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;    // 开漏输出
00002e  2001              MOVS     r0,#1
000030  f88d001a          STRB     r0,[sp,#0x1a]
;;;49     	GPIO_InitStruct.GPIO_Pin   = GPIO_Pin_8 | GPIO_Pin_9;
000034  f44f7040          MOV      r0,#0x300
000038  9005              STR      r0,[sp,#0x14]
;;;50     	GPIO_InitStruct.GPIO_PuPd  = GPIO_PuPd_UP;
00003a  2001              MOVS     r0,#1
00003c  f88d001b          STRB     r0,[sp,#0x1b]
;;;51     	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
000040  2003              MOVS     r0,#3
000042  f88d0019          STRB     r0,[sp,#0x19]
;;;52     	GPIO_Init(GPIOB, &GPIO_InitStruct);
000046  a905              ADD      r1,sp,#0x14
000048  480f              LDR      r0,|L3.136|
00004a  f7fffffe          BL       GPIO_Init
;;;53     	
;;;54     	// 配置 I2C1
;;;55     	I2C_InitStruct.I2C_Ack                 = I2C_Ack_Disable;
00004e  2000              MOVS     r0,#0
000050  f8ad000e          STRH     r0,[sp,#0xe]
;;;56     	// MCU 支持 7 位和 10 位地址，这里选择 7 位地址
;;;57     	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
000054  f44f4080          MOV      r0,#0x4000
000058  f8ad0010          STRH     r0,[sp,#0x10]
;;;58     	// MCU 支持 100KHz 和 400KHz 两种 SCL 时钟
;;;59     	I2C_InitStruct.I2C_ClockSpeed          = 100000;  // 100KHz 的 SCL 时钟
00005c  480b              LDR      r0,|L3.140|
00005e  9001              STR      r0,[sp,#4]
;;;60     	
;;;61     	
;;;62     	// SCL 时钟每个周期中低电平和高电平时间的比例，称为“占空比”
;;;63     	// MCU 支持两种快速模式占空比：T low : T high = 2:1, T low : T high = 16:9
;;;64     	I2C_InitStruct.I2C_DutyCycle           = I2C_DutyCycle_16_9;
000060  f44f4080          MOV      r0,#0x4000
000064  f8ad000a          STRH     r0,[sp,#0xa]
;;;65     	// MCU 支持：I2C, SMBus 设备, SMBus 主机 三种模式
;;;66     	I2C_InitStruct.I2C_Mode                = I2C_Mode_I2C;
000068  2000              MOVS     r0,#0
00006a  f8ad0008          STRH     r0,[sp,#8]
;;;67     	// 自身地址，当在总线上作为从器件时的地址
;;;68     	I2C_InitStruct.I2C_OwnAddress1         = MCU_I2C_OWN_ADDRESS;
00006e  20b0              MOVS     r0,#0xb0
000070  f8ad000c          STRH     r0,[sp,#0xc]
;;;69     	// void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct); 
;;;70     	I2C_Init(I2C1, &I2C_InitStruct);
000074  a901              ADD      r1,sp,#4
000076  4806              LDR      r0,|L3.144|
000078  f7fffffe          BL       I2C_Init
;;;71     	
;;;72     	// 使能 I2C1
;;;73     	// void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
;;;74     	I2C_Cmd(I2C1, ENABLE);
00007c  2101              MOVS     r1,#1
00007e  4804              LDR      r0,|L3.144|
000080  f7fffffe          BL       I2C_Cmd
;;;75     }
000084  b007              ADD      sp,sp,#0x1c
000086  bd00              POP      {pc}
;;;76     
                          ENDP

                  |L3.136|
                          DCD      0x40020400
                  |L3.140|
                          DCD      0x000186a0
                  |L3.144|
                          DCD      0x40005400

;*** Start embedded assembler ***

#line 1 "..\\..\\SYSTEM\\SRC\\i2c.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_i2c_c_f92a9653____REV16|
#line 138 "..\\..\\CORE\\core_cmInstr.h"
|__asm___5_i2c_c_f92a9653____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_i2c_c_f92a9653____REVSH|
#line 153
|__asm___5_i2c_c_f92a9653____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_i2c_c_f92a9653____RRX|
#line 328
|__asm___5_i2c_c_f92a9653____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
